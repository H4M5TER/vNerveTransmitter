// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: vNerve/vdb/vdb.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace VNerve.Vdb {

  /// <summary>Holder for reflection information generated from vNerve/vdb/vdb.proto</summary>
  public static partial class VdbReflection {

    #region Descriptor
    /// <summary>File descriptor for vNerve/vdb/vdb.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static VdbReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChR2TmVydmUvdmRiL3ZkYi5wcm90bxIKdk5lcnZlLnZkYiIQCg5HZXRWdGJz",
            "UmVxdWVzdCI3ChBWdHViZXJDb2xsZWN0aW9uEiMKB3Z0dWJlcnMYASADKAsy",
            "Ei52TmVydmUudmRiLlZ0dWJlciLkAQoGVnR1YmVyEgwKBHV1aWQYASABKAkS",
            "JAoEdHlwZRgCIAEoDjIWLnZOZXJ2ZS52ZGIuVnR1YmVyVHlwZRILCgNib3QY",
            "AyABKAgSJQoIYWNjb3VudHMYBCADKAsyEy52TmVydmUudmRiLkFjY291bnQS",
            "EgoKZ3JvdXBfdXVpZBgFIAEoCRIQCghtb2RlbF8yZBgGIAEoCBIQCghtb2Rl",
            "bF8zZBgHIAEoCBIcChRtb2RlbF8yZF9hcnRpc3RfdXVpZBgIIAEoCRIcChRt",
            "b2RlbF8zZF9hcnRpc3RfdXVpZBgJIAEoCSKUAgoHQWNjb3VudBIKCgJpZBgB",
            "IAEoCRItCgxhY2NvdW50X3R5cGUYAiABKA4yFy52TmVydmUudmRiLkFjY291",
            "bnRUeXBlEjUKEGFjY291bnRfcGxhdGZvcm0YAyABKA4yGy52TmVydmUudmRi",
            "LkFjY291bnRQbGF0Zm9ybRINCgVleHRyYRgEIAMoCRIMCgRuYW1lGAUgASgJ",
            "EkIKEG5hbWVfdHJhbnNsYXRpb24YBiADKAsyKC52TmVydmUudmRiLkFjY291",
            "bnQuTmFtZVRyYW5zbGF0aW9uRW50cnkaNgoUTmFtZVRyYW5zbGF0aW9uRW50",
            "cnkSCwoDa2V5GAEgASgJEg0KBXZhbHVlGAIgASgJOgI4ASpFCgpWdHViZXJU",
            "eXBlEhcKE1VOS05PV05fVlRVQkVSX1RZUEUQABIKCgZWVFVCRVIQARIJCgVH",
            "Uk9VUBACEgcKA0ZBThADKkAKC0FjY291bnRUeXBlEhgKFFVOS05PV05fQUND",
            "T1VOVF9UWVBFEAASDAoIT0ZGSUNJQUwQARIJCgVSRUxBWRACKpADCg9BY2Nv",
            "dW50UGxhdGZvcm0SFAoQVU5LTk9XTl9QTEFURk9STRAAEgwKCEJJTElCSUxJ",
            "EAESCwoHVFdJVFRFUhACEgsKB1lPVVRVQkUQAxINCglVU0VSTE9DQUwQBBIJ",
            "CgVQRUlORxAFEg8KC01BUlNITUFMTE9XEAYSCQoFUElYSVYQBxIJCgVXRUlC",
            "TxAIEgkKBUJPT1RIEAkSCgoGQUZESUFOEAoSBwoDV0VCEAsSCQoFRU1BSUwQ",
            "DBINCglJTlNUQUdSQU0QDRILCgdQT1BJQVNLEA4SEAoMQU1BWk9OX0NPX0pQ",
            "EA8SCgoGVFdJVENIEBASDAoITklDT05JQ08QERIMCghGQUNFQk9PSxASEg0K",
            "CVRFRVNQUklORxATEgsKB1BBVFJFT04QFBIMCghKVkNNVVNJQxAVEgkKBUNJ",
            "X0VOEBYSCgoGR0lUSFVCEBcSCAoETElORRAYEgoKBlRJS1RPSxAZEgoKBkZB",
            "TlRJQRAaEgwKCFNIT1dST09NEBsSDAoIVEVMRUdSQU0QHDLzAQoOVnR1YmVy",
            "RGF0YWJhc2USSwoNR2V0QWxsVnR1YmVycxIaLnZOZXJ2ZS52ZGIuR2V0VnRi",
            "c1JlcXVlc3QaHC52TmVydmUudmRiLlZ0dWJlckNvbGxlY3Rpb24iABJKCgxH",
            "ZXRBbGxHcm91cHMSGi52TmVydmUudmRiLkdldFZ0YnNSZXF1ZXN0Ghwudk5l",
            "cnZlLnZkYi5WdHViZXJDb2xsZWN0aW9uIgASSAoKR2V0QWxsRmFucxIaLnZO",
            "ZXJ2ZS52ZGIuR2V0VnRic1JlcXVlc3QaHC52TmVydmUudmRiLlZ0dWJlckNv",
            "bGxlY3Rpb24iAGIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::VNerve.Vdb.VtuberType), typeof(global::VNerve.Vdb.AccountType), typeof(global::VNerve.Vdb.AccountPlatform), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::VNerve.Vdb.GetVtbsRequest), global::VNerve.Vdb.GetVtbsRequest.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::VNerve.Vdb.VtuberCollection), global::VNerve.Vdb.VtuberCollection.Parser, new[]{ "Vtubers" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::VNerve.Vdb.Vtuber), global::VNerve.Vdb.Vtuber.Parser, new[]{ "Uuid", "Type", "Bot", "Accounts", "GroupUuid", "Model2D", "Model3D", "Model2DArtistUuid", "Model3DArtistUuid" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::VNerve.Vdb.Account), global::VNerve.Vdb.Account.Parser, new[]{ "Id", "AccountType", "AccountPlatform", "Extra", "Name", "NameTranslation" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, })
          }));
    }
    #endregion

  }
  #region Enums
  public enum VtuberType {
    [pbr::OriginalName("UNKNOWN_VTUBER_TYPE")] UnknownVtuberType = 0,
    [pbr::OriginalName("VTUBER")] Vtuber = 1,
    [pbr::OriginalName("GROUP")] Group = 2,
    [pbr::OriginalName("FAN")] Fan = 3,
  }

  public enum AccountType {
    [pbr::OriginalName("UNKNOWN_ACCOUNT_TYPE")] UnknownAccountType = 0,
    [pbr::OriginalName("OFFICIAL")] Official = 1,
    [pbr::OriginalName("RELAY")] Relay = 2,
  }

  public enum AccountPlatform {
    [pbr::OriginalName("UNKNOWN_PLATFORM")] UnknownPlatform = 0,
    [pbr::OriginalName("BILIBILI")] Bilibili = 1,
    [pbr::OriginalName("TWITTER")] Twitter = 2,
    [pbr::OriginalName("YOUTUBE")] Youtube = 3,
    [pbr::OriginalName("USERLOCAL")] Userlocal = 4,
    [pbr::OriginalName("PEING")] Peing = 5,
    [pbr::OriginalName("MARSHMALLOW")] Marshmallow = 6,
    [pbr::OriginalName("PIXIV")] Pixiv = 7,
    [pbr::OriginalName("WEIBO")] Weibo = 8,
    [pbr::OriginalName("BOOTH")] Booth = 9,
    [pbr::OriginalName("AFDIAN")] Afdian = 10,
    [pbr::OriginalName("WEB")] Web = 11,
    [pbr::OriginalName("EMAIL")] Email = 12,
    [pbr::OriginalName("INSTAGRAM")] Instagram = 13,
    [pbr::OriginalName("POPIASK")] Popiask = 14,
    [pbr::OriginalName("AMAZON_CO_JP")] AmazonCoJp = 15,
    [pbr::OriginalName("TWITCH")] Twitch = 16,
    [pbr::OriginalName("NICONICO")] Niconico = 17,
    [pbr::OriginalName("FACEBOOK")] Facebook = 18,
    [pbr::OriginalName("TEESPRING")] Teespring = 19,
    [pbr::OriginalName("PATREON")] Patreon = 20,
    [pbr::OriginalName("JVCMUSIC")] Jvcmusic = 21,
    [pbr::OriginalName("CI_EN")] CiEn = 22,
    [pbr::OriginalName("GITHUB")] Github = 23,
    [pbr::OriginalName("LINE")] Line = 24,
    [pbr::OriginalName("TIKTOK")] Tiktok = 25,
    [pbr::OriginalName("FANTIA")] Fantia = 26,
    [pbr::OriginalName("SHOWROOM")] Showroom = 27,
    [pbr::OriginalName("TELEGRAM")] Telegram = 28,
  }

  #endregion

  #region Messages
  public sealed partial class GetVtbsRequest : pb::IMessage<GetVtbsRequest> {
    private static readonly pb::MessageParser<GetVtbsRequest> _parser = new pb::MessageParser<GetVtbsRequest>(() => new GetVtbsRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetVtbsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::VNerve.Vdb.VdbReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetVtbsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetVtbsRequest(GetVtbsRequest other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetVtbsRequest Clone() {
      return new GetVtbsRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetVtbsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetVtbsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetVtbsRequest other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class VtuberCollection : pb::IMessage<VtuberCollection> {
    private static readonly pb::MessageParser<VtuberCollection> _parser = new pb::MessageParser<VtuberCollection>(() => new VtuberCollection());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VtuberCollection> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::VNerve.Vdb.VdbReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VtuberCollection() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VtuberCollection(VtuberCollection other) : this() {
      vtubers_ = other.vtubers_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VtuberCollection Clone() {
      return new VtuberCollection(this);
    }

    /// <summary>Field number for the "vtubers" field.</summary>
    public const int VtubersFieldNumber = 1;
    private static readonly pb::FieldCodec<global::VNerve.Vdb.Vtuber> _repeated_vtubers_codec
        = pb::FieldCodec.ForMessage(10, global::VNerve.Vdb.Vtuber.Parser);
    private readonly pbc::RepeatedField<global::VNerve.Vdb.Vtuber> vtubers_ = new pbc::RepeatedField<global::VNerve.Vdb.Vtuber>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::VNerve.Vdb.Vtuber> Vtubers {
      get { return vtubers_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as VtuberCollection);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(VtuberCollection other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!vtubers_.Equals(other.vtubers_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= vtubers_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      vtubers_.WriteTo(output, _repeated_vtubers_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += vtubers_.CalculateSize(_repeated_vtubers_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(VtuberCollection other) {
      if (other == null) {
        return;
      }
      vtubers_.Add(other.vtubers_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            vtubers_.AddEntriesFrom(input, _repeated_vtubers_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Vtuber : pb::IMessage<Vtuber> {
    private static readonly pb::MessageParser<Vtuber> _parser = new pb::MessageParser<Vtuber>(() => new Vtuber());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Vtuber> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::VNerve.Vdb.VdbReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vtuber() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vtuber(Vtuber other) : this() {
      uuid_ = other.uuid_;
      type_ = other.type_;
      bot_ = other.bot_;
      accounts_ = other.accounts_.Clone();
      groupUuid_ = other.groupUuid_;
      model2D_ = other.model2D_;
      model3D_ = other.model3D_;
      model2DArtistUuid_ = other.model2DArtistUuid_;
      model3DArtistUuid_ = other.model3DArtistUuid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vtuber Clone() {
      return new Vtuber(this);
    }

    /// <summary>Field number for the "uuid" field.</summary>
    public const int UuidFieldNumber = 1;
    private string uuid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Uuid {
      get { return uuid_; }
      set {
        uuid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private global::VNerve.Vdb.VtuberType type_ = global::VNerve.Vdb.VtuberType.UnknownVtuberType;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::VNerve.Vdb.VtuberType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "bot" field.</summary>
    public const int BotFieldNumber = 3;
    private bool bot_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Bot {
      get { return bot_; }
      set {
        bot_ = value;
      }
    }

    /// <summary>Field number for the "accounts" field.</summary>
    public const int AccountsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::VNerve.Vdb.Account> _repeated_accounts_codec
        = pb::FieldCodec.ForMessage(34, global::VNerve.Vdb.Account.Parser);
    private readonly pbc::RepeatedField<global::VNerve.Vdb.Account> accounts_ = new pbc::RepeatedField<global::VNerve.Vdb.Account>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::VNerve.Vdb.Account> Accounts {
      get { return accounts_; }
    }

    /// <summary>Field number for the "group_uuid" field.</summary>
    public const int GroupUuidFieldNumber = 5;
    private string groupUuid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GroupUuid {
      get { return groupUuid_; }
      set {
        groupUuid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "model_2d" field.</summary>
    public const int Model2DFieldNumber = 6;
    private bool model2D_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Model2D {
      get { return model2D_; }
      set {
        model2D_ = value;
      }
    }

    /// <summary>Field number for the "model_3d" field.</summary>
    public const int Model3DFieldNumber = 7;
    private bool model3D_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Model3D {
      get { return model3D_; }
      set {
        model3D_ = value;
      }
    }

    /// <summary>Field number for the "model_2d_artist_uuid" field.</summary>
    public const int Model2DArtistUuidFieldNumber = 8;
    private string model2DArtistUuid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Model2DArtistUuid {
      get { return model2DArtistUuid_; }
      set {
        model2DArtistUuid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "model_3d_artist_uuid" field.</summary>
    public const int Model3DArtistUuidFieldNumber = 9;
    private string model3DArtistUuid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Model3DArtistUuid {
      get { return model3DArtistUuid_; }
      set {
        model3DArtistUuid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Vtuber);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Vtuber other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uuid != other.Uuid) return false;
      if (Type != other.Type) return false;
      if (Bot != other.Bot) return false;
      if(!accounts_.Equals(other.accounts_)) return false;
      if (GroupUuid != other.GroupUuid) return false;
      if (Model2D != other.Model2D) return false;
      if (Model3D != other.Model3D) return false;
      if (Model2DArtistUuid != other.Model2DArtistUuid) return false;
      if (Model3DArtistUuid != other.Model3DArtistUuid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Uuid.Length != 0) hash ^= Uuid.GetHashCode();
      if (Type != global::VNerve.Vdb.VtuberType.UnknownVtuberType) hash ^= Type.GetHashCode();
      if (Bot != false) hash ^= Bot.GetHashCode();
      hash ^= accounts_.GetHashCode();
      if (GroupUuid.Length != 0) hash ^= GroupUuid.GetHashCode();
      if (Model2D != false) hash ^= Model2D.GetHashCode();
      if (Model3D != false) hash ^= Model3D.GetHashCode();
      if (Model2DArtistUuid.Length != 0) hash ^= Model2DArtistUuid.GetHashCode();
      if (Model3DArtistUuid.Length != 0) hash ^= Model3DArtistUuid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uuid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Uuid);
      }
      if (Type != global::VNerve.Vdb.VtuberType.UnknownVtuberType) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Type);
      }
      if (Bot != false) {
        output.WriteRawTag(24);
        output.WriteBool(Bot);
      }
      accounts_.WriteTo(output, _repeated_accounts_codec);
      if (GroupUuid.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(GroupUuid);
      }
      if (Model2D != false) {
        output.WriteRawTag(48);
        output.WriteBool(Model2D);
      }
      if (Model3D != false) {
        output.WriteRawTag(56);
        output.WriteBool(Model3D);
      }
      if (Model2DArtistUuid.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Model2DArtistUuid);
      }
      if (Model3DArtistUuid.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(Model3DArtistUuid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uuid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Uuid);
      }
      if (Type != global::VNerve.Vdb.VtuberType.UnknownVtuberType) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (Bot != false) {
        size += 1 + 1;
      }
      size += accounts_.CalculateSize(_repeated_accounts_codec);
      if (GroupUuid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GroupUuid);
      }
      if (Model2D != false) {
        size += 1 + 1;
      }
      if (Model3D != false) {
        size += 1 + 1;
      }
      if (Model2DArtistUuid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Model2DArtistUuid);
      }
      if (Model3DArtistUuid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Model3DArtistUuid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Vtuber other) {
      if (other == null) {
        return;
      }
      if (other.Uuid.Length != 0) {
        Uuid = other.Uuid;
      }
      if (other.Type != global::VNerve.Vdb.VtuberType.UnknownVtuberType) {
        Type = other.Type;
      }
      if (other.Bot != false) {
        Bot = other.Bot;
      }
      accounts_.Add(other.accounts_);
      if (other.GroupUuid.Length != 0) {
        GroupUuid = other.GroupUuid;
      }
      if (other.Model2D != false) {
        Model2D = other.Model2D;
      }
      if (other.Model3D != false) {
        Model3D = other.Model3D;
      }
      if (other.Model2DArtistUuid.Length != 0) {
        Model2DArtistUuid = other.Model2DArtistUuid;
      }
      if (other.Model3DArtistUuid.Length != 0) {
        Model3DArtistUuid = other.Model3DArtistUuid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Uuid = input.ReadString();
            break;
          }
          case 16: {
            Type = (global::VNerve.Vdb.VtuberType) input.ReadEnum();
            break;
          }
          case 24: {
            Bot = input.ReadBool();
            break;
          }
          case 34: {
            accounts_.AddEntriesFrom(input, _repeated_accounts_codec);
            break;
          }
          case 42: {
            GroupUuid = input.ReadString();
            break;
          }
          case 48: {
            Model2D = input.ReadBool();
            break;
          }
          case 56: {
            Model3D = input.ReadBool();
            break;
          }
          case 66: {
            Model2DArtistUuid = input.ReadString();
            break;
          }
          case 74: {
            Model3DArtistUuid = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Account : pb::IMessage<Account> {
    private static readonly pb::MessageParser<Account> _parser = new pb::MessageParser<Account>(() => new Account());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Account> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::VNerve.Vdb.VdbReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Account() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Account(Account other) : this() {
      id_ = other.id_;
      accountType_ = other.accountType_;
      accountPlatform_ = other.accountPlatform_;
      extra_ = other.extra_.Clone();
      name_ = other.name_;
      nameTranslation_ = other.nameTranslation_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Account Clone() {
      return new Account(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "account_type" field.</summary>
    public const int AccountTypeFieldNumber = 2;
    private global::VNerve.Vdb.AccountType accountType_ = global::VNerve.Vdb.AccountType.UnknownAccountType;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::VNerve.Vdb.AccountType AccountType {
      get { return accountType_; }
      set {
        accountType_ = value;
      }
    }

    /// <summary>Field number for the "account_platform" field.</summary>
    public const int AccountPlatformFieldNumber = 3;
    private global::VNerve.Vdb.AccountPlatform accountPlatform_ = global::VNerve.Vdb.AccountPlatform.UnknownPlatform;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::VNerve.Vdb.AccountPlatform AccountPlatform {
      get { return accountPlatform_; }
      set {
        accountPlatform_ = value;
      }
    }

    /// <summary>Field number for the "extra" field.</summary>
    public const int ExtraFieldNumber = 4;
    private static readonly pb::FieldCodec<string> _repeated_extra_codec
        = pb::FieldCodec.ForString(34);
    private readonly pbc::RepeatedField<string> extra_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Extra {
      get { return extra_; }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 5;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name_translation" field.</summary>
    public const int NameTranslationFieldNumber = 6;
    private static readonly pbc::MapField<string, string>.Codec _map_nameTranslation_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForString(18, ""), 50);
    private readonly pbc::MapField<string, string> nameTranslation_ = new pbc::MapField<string, string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> NameTranslation {
      get { return nameTranslation_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Account);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Account other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (AccountType != other.AccountType) return false;
      if (AccountPlatform != other.AccountPlatform) return false;
      if(!extra_.Equals(other.extra_)) return false;
      if (Name != other.Name) return false;
      if (!NameTranslation.Equals(other.NameTranslation)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (AccountType != global::VNerve.Vdb.AccountType.UnknownAccountType) hash ^= AccountType.GetHashCode();
      if (AccountPlatform != global::VNerve.Vdb.AccountPlatform.UnknownPlatform) hash ^= AccountPlatform.GetHashCode();
      hash ^= extra_.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      hash ^= NameTranslation.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (AccountType != global::VNerve.Vdb.AccountType.UnknownAccountType) {
        output.WriteRawTag(16);
        output.WriteEnum((int) AccountType);
      }
      if (AccountPlatform != global::VNerve.Vdb.AccountPlatform.UnknownPlatform) {
        output.WriteRawTag(24);
        output.WriteEnum((int) AccountPlatform);
      }
      extra_.WriteTo(output, _repeated_extra_codec);
      if (Name.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Name);
      }
      nameTranslation_.WriteTo(output, _map_nameTranslation_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (AccountType != global::VNerve.Vdb.AccountType.UnknownAccountType) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) AccountType);
      }
      if (AccountPlatform != global::VNerve.Vdb.AccountPlatform.UnknownPlatform) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) AccountPlatform);
      }
      size += extra_.CalculateSize(_repeated_extra_codec);
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      size += nameTranslation_.CalculateSize(_map_nameTranslation_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Account other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.AccountType != global::VNerve.Vdb.AccountType.UnknownAccountType) {
        AccountType = other.AccountType;
      }
      if (other.AccountPlatform != global::VNerve.Vdb.AccountPlatform.UnknownPlatform) {
        AccountPlatform = other.AccountPlatform;
      }
      extra_.Add(other.extra_);
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      nameTranslation_.Add(other.nameTranslation_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 16: {
            AccountType = (global::VNerve.Vdb.AccountType) input.ReadEnum();
            break;
          }
          case 24: {
            AccountPlatform = (global::VNerve.Vdb.AccountPlatform) input.ReadEnum();
            break;
          }
          case 34: {
            extra_.AddEntriesFrom(input, _repeated_extra_codec);
            break;
          }
          case 42: {
            Name = input.ReadString();
            break;
          }
          case 50: {
            nameTranslation_.AddEntriesFrom(input, _map_nameTranslation_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
