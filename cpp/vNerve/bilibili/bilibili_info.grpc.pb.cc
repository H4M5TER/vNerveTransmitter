// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: vNerve/bilibili/bilibili_info.proto

#include "vNerve/bilibili/bilibili_info.pb.h"
#include "vNerve/bilibili/bilibili_info.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace vNerve {
namespace bilibili {

static const char* Bilibili_method_names[] = {
  "/vNerve.bilibili.Bilibili/GetAllBilibiliInfos",
  "/vNerve.bilibili.Bilibili/GetBilibiliInfoByUid",
};

std::unique_ptr< Bilibili::Stub> Bilibili::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Bilibili::Stub> stub(new Bilibili::Stub(channel));
  return stub;
}

Bilibili::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_GetAllBilibiliInfos_(Bilibili_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetBilibiliInfoByUid_(Bilibili_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Bilibili::Stub::GetAllBilibiliInfos(::grpc::ClientContext* context, const ::vNerve::bilibili::GetAllBilibiliInfosRequest& request, ::vNerve::bilibili::BilibiliCollection* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetAllBilibiliInfos_, context, request, response);
}

void Bilibili::Stub::experimental_async::GetAllBilibiliInfos(::grpc::ClientContext* context, const ::vNerve::bilibili::GetAllBilibiliInfosRequest* request, ::vNerve::bilibili::BilibiliCollection* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetAllBilibiliInfos_, context, request, response, std::move(f));
}

void Bilibili::Stub::experimental_async::GetAllBilibiliInfos(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::vNerve::bilibili::BilibiliCollection* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetAllBilibiliInfos_, context, request, response, std::move(f));
}

void Bilibili::Stub::experimental_async::GetAllBilibiliInfos(::grpc::ClientContext* context, const ::vNerve::bilibili::GetAllBilibiliInfosRequest* request, ::vNerve::bilibili::BilibiliCollection* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetAllBilibiliInfos_, context, request, response, reactor);
}

void Bilibili::Stub::experimental_async::GetAllBilibiliInfos(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::vNerve::bilibili::BilibiliCollection* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetAllBilibiliInfos_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::vNerve::bilibili::BilibiliCollection>* Bilibili::Stub::AsyncGetAllBilibiliInfosRaw(::grpc::ClientContext* context, const ::vNerve::bilibili::GetAllBilibiliInfosRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::vNerve::bilibili::BilibiliCollection>::Create(channel_.get(), cq, rpcmethod_GetAllBilibiliInfos_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::vNerve::bilibili::BilibiliCollection>* Bilibili::Stub::PrepareAsyncGetAllBilibiliInfosRaw(::grpc::ClientContext* context, const ::vNerve::bilibili::GetAllBilibiliInfosRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::vNerve::bilibili::BilibiliCollection>::Create(channel_.get(), cq, rpcmethod_GetAllBilibiliInfos_, context, request, false);
}

::grpc::Status Bilibili::Stub::GetBilibiliInfoByUid(::grpc::ClientContext* context, const ::vNerve::bilibili::GetBilibiliInfoByUidRequest& request, ::vNerve::bilibili::BilibiliInfo* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetBilibiliInfoByUid_, context, request, response);
}

void Bilibili::Stub::experimental_async::GetBilibiliInfoByUid(::grpc::ClientContext* context, const ::vNerve::bilibili::GetBilibiliInfoByUidRequest* request, ::vNerve::bilibili::BilibiliInfo* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetBilibiliInfoByUid_, context, request, response, std::move(f));
}

void Bilibili::Stub::experimental_async::GetBilibiliInfoByUid(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::vNerve::bilibili::BilibiliInfo* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetBilibiliInfoByUid_, context, request, response, std::move(f));
}

void Bilibili::Stub::experimental_async::GetBilibiliInfoByUid(::grpc::ClientContext* context, const ::vNerve::bilibili::GetBilibiliInfoByUidRequest* request, ::vNerve::bilibili::BilibiliInfo* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetBilibiliInfoByUid_, context, request, response, reactor);
}

void Bilibili::Stub::experimental_async::GetBilibiliInfoByUid(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::vNerve::bilibili::BilibiliInfo* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetBilibiliInfoByUid_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::vNerve::bilibili::BilibiliInfo>* Bilibili::Stub::AsyncGetBilibiliInfoByUidRaw(::grpc::ClientContext* context, const ::vNerve::bilibili::GetBilibiliInfoByUidRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::vNerve::bilibili::BilibiliInfo>::Create(channel_.get(), cq, rpcmethod_GetBilibiliInfoByUid_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::vNerve::bilibili::BilibiliInfo>* Bilibili::Stub::PrepareAsyncGetBilibiliInfoByUidRaw(::grpc::ClientContext* context, const ::vNerve::bilibili::GetBilibiliInfoByUidRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::vNerve::bilibili::BilibiliInfo>::Create(channel_.get(), cq, rpcmethod_GetBilibiliInfoByUid_, context, request, false);
}

Bilibili::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Bilibili_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Bilibili::Service, ::vNerve::bilibili::GetAllBilibiliInfosRequest, ::vNerve::bilibili::BilibiliCollection>(
          std::mem_fn(&Bilibili::Service::GetAllBilibiliInfos), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Bilibili_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Bilibili::Service, ::vNerve::bilibili::GetBilibiliInfoByUidRequest, ::vNerve::bilibili::BilibiliInfo>(
          std::mem_fn(&Bilibili::Service::GetBilibiliInfoByUid), this)));
}

Bilibili::Service::~Service() {
}

::grpc::Status Bilibili::Service::GetAllBilibiliInfos(::grpc::ServerContext* context, const ::vNerve::bilibili::GetAllBilibiliInfosRequest* request, ::vNerve::bilibili::BilibiliCollection* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Bilibili::Service::GetBilibiliInfoByUid(::grpc::ServerContext* context, const ::vNerve::bilibili::GetBilibiliInfoByUidRequest* request, ::vNerve::bilibili::BilibiliInfo* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace vNerve
}  // namespace bilibili

