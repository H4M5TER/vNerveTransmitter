// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vNerve/bilibili/live/message.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_vNerve_2fbilibili_2flive_2fmessage_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_vNerve_2fbilibili_2flive_2fmessage_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "vNerve/bilibili/live/room_message.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_vNerve_2fbilibili_2flive_2fmessage_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_vNerve_2fbilibili_2flive_2fmessage_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_vNerve_2fbilibili_2flive_2fmessage_2eproto;
namespace vNerve {
namespace bilibili {
namespace live {
class Message;
class MessageDefaultTypeInternal;
extern MessageDefaultTypeInternal _Message_default_instance_;
}  // namespace live
}  // namespace bilibili
}  // namespace vNerve
PROTOBUF_NAMESPACE_OPEN
template<> ::vNerve::bilibili::live::Message* Arena::CreateMaybeMessage<::vNerve::bilibili::live::Message>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace vNerve {
namespace bilibili {
namespace live {

// ===================================================================

class Message :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vNerve.bilibili.live.Message) */ {
 public:
  Message();
  virtual ~Message();

  Message(const Message& from);
  Message(Message&& from) noexcept
    : Message() {
    *this = ::std::move(from);
  }

  inline Message& operator=(const Message& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message& operator=(Message&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Message& default_instance();

  enum PayloadCase {
    kRoomMessage = 2,
    PAYLOAD_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Message* internal_default_instance() {
    return reinterpret_cast<const Message*>(
               &_Message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Message& a, Message& b) {
    a.Swap(&b);
  }
  inline void Swap(Message* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Message* New() const final {
    return CreateMaybeMessage<Message>(nullptr);
  }

  Message* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Message>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Message& from);
  void MergeFrom(const Message& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vNerve.bilibili.live.Message";
  }
  protected:
  explicit Message(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vNerve_2fbilibili_2flive_2fmessage_2eproto);
    return ::descriptor_table_vNerve_2fbilibili_2flive_2fmessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimestampFieldNumber = 1,
    kRoomMessageFieldNumber = 2,
  };
  // uint64 timestamp = 1;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .vNerve.bilibili.live.RoomMessage room_message = 2;
  bool has_room_message() const;
  private:
  bool _internal_has_room_message() const;
  public:
  void clear_room_message();
  const ::vNerve::bilibili::live::RoomMessage& room_message() const;
  ::vNerve::bilibili::live::RoomMessage* release_room_message();
  ::vNerve::bilibili::live::RoomMessage* mutable_room_message();
  void set_allocated_room_message(::vNerve::bilibili::live::RoomMessage* room_message);
  private:
  const ::vNerve::bilibili::live::RoomMessage& _internal_room_message() const;
  ::vNerve::bilibili::live::RoomMessage* _internal_mutable_room_message();
  public:
  void unsafe_arena_set_allocated_room_message(
      ::vNerve::bilibili::live::RoomMessage* room_message);
  ::vNerve::bilibili::live::RoomMessage* unsafe_arena_release_room_message();

  void clear_payload();
  PayloadCase payload_case() const;
  // @@protoc_insertion_point(class_scope:vNerve.bilibili.live.Message)
 private:
  class _Internal;
  void set_has_room_message();

  inline bool has_payload() const;
  inline void clear_has_payload();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp_;
  union PayloadUnion {
    PayloadUnion() {}
    ::vNerve::bilibili::live::RoomMessage* room_message_;
  } payload_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_vNerve_2fbilibili_2flive_2fmessage_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Message

// uint64 timestamp = 1;
inline void Message::clear_timestamp() {
  timestamp_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Message::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Message::timestamp() const {
  // @@protoc_insertion_point(field_get:vNerve.bilibili.live.Message.timestamp)
  return _internal_timestamp();
}
inline void Message::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  timestamp_ = value;
}
inline void Message::set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:vNerve.bilibili.live.Message.timestamp)
}

// .vNerve.bilibili.live.RoomMessage room_message = 2;
inline bool Message::_internal_has_room_message() const {
  return payload_case() == kRoomMessage;
}
inline bool Message::has_room_message() const {
  return _internal_has_room_message();
}
inline void Message::set_has_room_message() {
  _oneof_case_[0] = kRoomMessage;
}
inline ::vNerve::bilibili::live::RoomMessage* Message::release_room_message() {
  // @@protoc_insertion_point(field_release:vNerve.bilibili.live.Message.room_message)
  if (_internal_has_room_message()) {
    clear_has_payload();
      ::vNerve::bilibili::live::RoomMessage* temp = payload_.room_message_;
    if (GetArenaNoVirtual() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.room_message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::vNerve::bilibili::live::RoomMessage& Message::_internal_room_message() const {
  return _internal_has_room_message()
      ? *payload_.room_message_
      : *reinterpret_cast< ::vNerve::bilibili::live::RoomMessage*>(&::vNerve::bilibili::live::_RoomMessage_default_instance_);
}
inline const ::vNerve::bilibili::live::RoomMessage& Message::room_message() const {
  // @@protoc_insertion_point(field_get:vNerve.bilibili.live.Message.room_message)
  return _internal_room_message();
}
inline ::vNerve::bilibili::live::RoomMessage* Message::unsafe_arena_release_room_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:vNerve.bilibili.live.Message.room_message)
  if (_internal_has_room_message()) {
    clear_has_payload();
    ::vNerve::bilibili::live::RoomMessage* temp = payload_.room_message_;
    payload_.room_message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message::unsafe_arena_set_allocated_room_message(::vNerve::bilibili::live::RoomMessage* room_message) {
  clear_payload();
  if (room_message) {
    set_has_room_message();
    payload_.room_message_ = room_message;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vNerve.bilibili.live.Message.room_message)
}
inline ::vNerve::bilibili::live::RoomMessage* Message::_internal_mutable_room_message() {
  if (!_internal_has_room_message()) {
    clear_payload();
    set_has_room_message();
    payload_.room_message_ = CreateMaybeMessage< ::vNerve::bilibili::live::RoomMessage >(
        GetArenaNoVirtual());
  }
  return payload_.room_message_;
}
inline ::vNerve::bilibili::live::RoomMessage* Message::mutable_room_message() {
  // @@protoc_insertion_point(field_mutable:vNerve.bilibili.live.Message.room_message)
  return _internal_mutable_room_message();
}

inline bool Message::has_payload() const {
  return payload_case() != PAYLOAD_NOT_SET;
}
inline void Message::clear_has_payload() {
  _oneof_case_[0] = PAYLOAD_NOT_SET;
}
inline Message::PayloadCase Message::payload_case() const {
  return Message::PayloadCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace live
}  // namespace bilibili
}  // namespace vNerve

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_vNerve_2fbilibili_2flive_2fmessage_2eproto
