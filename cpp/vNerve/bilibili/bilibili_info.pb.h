// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vNerve/bilibili/bilibili_info.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_vNerve_2fbilibili_2fbilibili_5finfo_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_vNerve_2fbilibili_2fbilibili_5finfo_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_vNerve_2fbilibili_2fbilibili_5finfo_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_vNerve_2fbilibili_2fbilibili_5finfo_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_vNerve_2fbilibili_2fbilibili_5finfo_2eproto;
namespace vNerve {
namespace bilibili {
class BilibiliCollection;
class BilibiliCollectionDefaultTypeInternal;
extern BilibiliCollectionDefaultTypeInternal _BilibiliCollection_default_instance_;
class BilibiliInfo;
class BilibiliInfoDefaultTypeInternal;
extern BilibiliInfoDefaultTypeInternal _BilibiliInfo_default_instance_;
class GetAllBilibiliInfosRequest;
class GetAllBilibiliInfosRequestDefaultTypeInternal;
extern GetAllBilibiliInfosRequestDefaultTypeInternal _GetAllBilibiliInfosRequest_default_instance_;
class GetBilibiliInfoByUidRequest;
class GetBilibiliInfoByUidRequestDefaultTypeInternal;
extern GetBilibiliInfoByUidRequestDefaultTypeInternal _GetBilibiliInfoByUidRequest_default_instance_;
}  // namespace bilibili
}  // namespace vNerve
PROTOBUF_NAMESPACE_OPEN
template<> ::vNerve::bilibili::BilibiliCollection* Arena::CreateMaybeMessage<::vNerve::bilibili::BilibiliCollection>(Arena*);
template<> ::vNerve::bilibili::BilibiliInfo* Arena::CreateMaybeMessage<::vNerve::bilibili::BilibiliInfo>(Arena*);
template<> ::vNerve::bilibili::GetAllBilibiliInfosRequest* Arena::CreateMaybeMessage<::vNerve::bilibili::GetAllBilibiliInfosRequest>(Arena*);
template<> ::vNerve::bilibili::GetBilibiliInfoByUidRequest* Arena::CreateMaybeMessage<::vNerve::bilibili::GetBilibiliInfoByUidRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace vNerve {
namespace bilibili {

enum LiveStatus : int {
  PREPARING = 0,
  LIVE = 1,
  ROUND = 2,
  CUT_OFF = 3,
  LiveStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  LiveStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool LiveStatus_IsValid(int value);
constexpr LiveStatus LiveStatus_MIN = PREPARING;
constexpr LiveStatus LiveStatus_MAX = CUT_OFF;
constexpr int LiveStatus_ARRAYSIZE = LiveStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LiveStatus_descriptor();
template<typename T>
inline const std::string& LiveStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LiveStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LiveStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    LiveStatus_descriptor(), enum_t_value);
}
inline bool LiveStatus_Parse(
    const std::string& name, LiveStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<LiveStatus>(
    LiveStatus_descriptor(), name, value);
}
// ===================================================================

class GetAllBilibiliInfosRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vNerve.bilibili.GetAllBilibiliInfosRequest) */ {
 public:
  GetAllBilibiliInfosRequest();
  virtual ~GetAllBilibiliInfosRequest();

  GetAllBilibiliInfosRequest(const GetAllBilibiliInfosRequest& from);
  GetAllBilibiliInfosRequest(GetAllBilibiliInfosRequest&& from) noexcept
    : GetAllBilibiliInfosRequest() {
    *this = ::std::move(from);
  }

  inline GetAllBilibiliInfosRequest& operator=(const GetAllBilibiliInfosRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAllBilibiliInfosRequest& operator=(GetAllBilibiliInfosRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetAllBilibiliInfosRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetAllBilibiliInfosRequest* internal_default_instance() {
    return reinterpret_cast<const GetAllBilibiliInfosRequest*>(
               &_GetAllBilibiliInfosRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GetAllBilibiliInfosRequest& a, GetAllBilibiliInfosRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetAllBilibiliInfosRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetAllBilibiliInfosRequest* New() const final {
    return CreateMaybeMessage<GetAllBilibiliInfosRequest>(nullptr);
  }

  GetAllBilibiliInfosRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetAllBilibiliInfosRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetAllBilibiliInfosRequest& from);
  void MergeFrom(const GetAllBilibiliInfosRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetAllBilibiliInfosRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vNerve.bilibili.GetAllBilibiliInfosRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vNerve_2fbilibili_2fbilibili_5finfo_2eproto);
    return ::descriptor_table_vNerve_2fbilibili_2fbilibili_5finfo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStaticOnlyFieldNumber = 1,
  };
  // bool static_only = 1;
  void clear_static_only();
  bool static_only() const;
  void set_static_only(bool value);
  private:
  bool _internal_static_only() const;
  void _internal_set_static_only(bool value);
  public:

  // @@protoc_insertion_point(class_scope:vNerve.bilibili.GetAllBilibiliInfosRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  bool static_only_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vNerve_2fbilibili_2fbilibili_5finfo_2eproto;
};
// -------------------------------------------------------------------

class GetBilibiliInfoByUidRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vNerve.bilibili.GetBilibiliInfoByUidRequest) */ {
 public:
  GetBilibiliInfoByUidRequest();
  virtual ~GetBilibiliInfoByUidRequest();

  GetBilibiliInfoByUidRequest(const GetBilibiliInfoByUidRequest& from);
  GetBilibiliInfoByUidRequest(GetBilibiliInfoByUidRequest&& from) noexcept
    : GetBilibiliInfoByUidRequest() {
    *this = ::std::move(from);
  }

  inline GetBilibiliInfoByUidRequest& operator=(const GetBilibiliInfoByUidRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetBilibiliInfoByUidRequest& operator=(GetBilibiliInfoByUidRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetBilibiliInfoByUidRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetBilibiliInfoByUidRequest* internal_default_instance() {
    return reinterpret_cast<const GetBilibiliInfoByUidRequest*>(
               &_GetBilibiliInfoByUidRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GetBilibiliInfoByUidRequest& a, GetBilibiliInfoByUidRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetBilibiliInfoByUidRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetBilibiliInfoByUidRequest* New() const final {
    return CreateMaybeMessage<GetBilibiliInfoByUidRequest>(nullptr);
  }

  GetBilibiliInfoByUidRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetBilibiliInfoByUidRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetBilibiliInfoByUidRequest& from);
  void MergeFrom(const GetBilibiliInfoByUidRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetBilibiliInfoByUidRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vNerve.bilibili.GetBilibiliInfoByUidRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vNerve_2fbilibili_2fbilibili_5finfo_2eproto);
    return ::descriptor_table_vNerve_2fbilibili_2fbilibili_5finfo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUidFieldNumber = 1,
    kStaticOnlyFieldNumber = 2,
  };
  // uint32 uid = 1;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::uint32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool static_only = 2;
  void clear_static_only();
  bool static_only() const;
  void set_static_only(bool value);
  private:
  bool _internal_static_only() const;
  void _internal_set_static_only(bool value);
  public:

  // @@protoc_insertion_point(class_scope:vNerve.bilibili.GetBilibiliInfoByUidRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 uid_;
  bool static_only_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vNerve_2fbilibili_2fbilibili_5finfo_2eproto;
};
// -------------------------------------------------------------------

class BilibiliCollection :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vNerve.bilibili.BilibiliCollection) */ {
 public:
  BilibiliCollection();
  virtual ~BilibiliCollection();

  BilibiliCollection(const BilibiliCollection& from);
  BilibiliCollection(BilibiliCollection&& from) noexcept
    : BilibiliCollection() {
    *this = ::std::move(from);
  }

  inline BilibiliCollection& operator=(const BilibiliCollection& from) {
    CopyFrom(from);
    return *this;
  }
  inline BilibiliCollection& operator=(BilibiliCollection&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BilibiliCollection& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BilibiliCollection* internal_default_instance() {
    return reinterpret_cast<const BilibiliCollection*>(
               &_BilibiliCollection_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(BilibiliCollection& a, BilibiliCollection& b) {
    a.Swap(&b);
  }
  inline void Swap(BilibiliCollection* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BilibiliCollection* New() const final {
    return CreateMaybeMessage<BilibiliCollection>(nullptr);
  }

  BilibiliCollection* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BilibiliCollection>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BilibiliCollection& from);
  void MergeFrom(const BilibiliCollection& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BilibiliCollection* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vNerve.bilibili.BilibiliCollection";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vNerve_2fbilibili_2fbilibili_5finfo_2eproto);
    return ::descriptor_table_vNerve_2fbilibili_2fbilibili_5finfo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBilibiliInfosFieldNumber = 1,
  };
  // repeated .vNerve.bilibili.BilibiliInfo bilibili_infos = 1;
  int bilibili_infos_size() const;
  private:
  int _internal_bilibili_infos_size() const;
  public:
  void clear_bilibili_infos();
  ::vNerve::bilibili::BilibiliInfo* mutable_bilibili_infos(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vNerve::bilibili::BilibiliInfo >*
      mutable_bilibili_infos();
  private:
  const ::vNerve::bilibili::BilibiliInfo& _internal_bilibili_infos(int index) const;
  ::vNerve::bilibili::BilibiliInfo* _internal_add_bilibili_infos();
  public:
  const ::vNerve::bilibili::BilibiliInfo& bilibili_infos(int index) const;
  ::vNerve::bilibili::BilibiliInfo* add_bilibili_infos();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vNerve::bilibili::BilibiliInfo >&
      bilibili_infos() const;

  // @@protoc_insertion_point(class_scope:vNerve.bilibili.BilibiliCollection)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vNerve::bilibili::BilibiliInfo > bilibili_infos_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vNerve_2fbilibili_2fbilibili_5finfo_2eproto;
};
// -------------------------------------------------------------------

class BilibiliInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vNerve.bilibili.BilibiliInfo) */ {
 public:
  BilibiliInfo();
  virtual ~BilibiliInfo();

  BilibiliInfo(const BilibiliInfo& from);
  BilibiliInfo(BilibiliInfo&& from) noexcept
    : BilibiliInfo() {
    *this = ::std::move(from);
  }

  inline BilibiliInfo& operator=(const BilibiliInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline BilibiliInfo& operator=(BilibiliInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BilibiliInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BilibiliInfo* internal_default_instance() {
    return reinterpret_cast<const BilibiliInfo*>(
               &_BilibiliInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(BilibiliInfo& a, BilibiliInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(BilibiliInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BilibiliInfo* New() const final {
    return CreateMaybeMessage<BilibiliInfo>(nullptr);
  }

  BilibiliInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BilibiliInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BilibiliInfo& from);
  void MergeFrom(const BilibiliInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BilibiliInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vNerve.bilibili.BilibiliInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vNerve_2fbilibili_2fbilibili_5finfo_2eproto);
    return ::descriptor_table_vNerve_2fbilibili_2fbilibili_5finfo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUuidFieldNumber = 2,
    kUnameFieldNumber = 3,
    kRoomTitleFieldNumber = 7,
    kDescriptionFieldNumber = 11,
    kRoomNoticeFieldNumber = 12,
    kAvatarUrlFieldNumber = 13,
    kBannerImageUrlFieldNumber = 14,
    kUidFieldNumber = 1,
    kRoomIdFieldNumber = 4,
    kFollowerFieldNumber = 5,
    kFollowerDailyIncrementFieldNumber = 6,
    kLiveStatusFieldNumber = 8,
    kPopularityFieldNumber = 9,
    kRankAreaFieldNumber = 10,
    kVideoCountFieldNumber = 15,
    kVideoTotalViewsFieldNumber = 16,
    kGuardCountFieldNumber = 17,
    kGuardLevel1FieldNumber = 18,
    kGuardLevel2FieldNumber = 19,
    kGuardLevel3FieldNumber = 20,
  };
  // string uuid = 2;
  void clear_uuid();
  const std::string& uuid() const;
  void set_uuid(const std::string& value);
  void set_uuid(std::string&& value);
  void set_uuid(const char* value);
  void set_uuid(const char* value, size_t size);
  std::string* mutable_uuid();
  std::string* release_uuid();
  void set_allocated_uuid(std::string* uuid);
  private:
  const std::string& _internal_uuid() const;
  void _internal_set_uuid(const std::string& value);
  std::string* _internal_mutable_uuid();
  public:

  // string uname = 3;
  void clear_uname();
  const std::string& uname() const;
  void set_uname(const std::string& value);
  void set_uname(std::string&& value);
  void set_uname(const char* value);
  void set_uname(const char* value, size_t size);
  std::string* mutable_uname();
  std::string* release_uname();
  void set_allocated_uname(std::string* uname);
  private:
  const std::string& _internal_uname() const;
  void _internal_set_uname(const std::string& value);
  std::string* _internal_mutable_uname();
  public:

  // string room_title = 7;
  void clear_room_title();
  const std::string& room_title() const;
  void set_room_title(const std::string& value);
  void set_room_title(std::string&& value);
  void set_room_title(const char* value);
  void set_room_title(const char* value, size_t size);
  std::string* mutable_room_title();
  std::string* release_room_title();
  void set_allocated_room_title(std::string* room_title);
  private:
  const std::string& _internal_room_title() const;
  void _internal_set_room_title(const std::string& value);
  std::string* _internal_mutable_room_title();
  public:

  // string description = 11;
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // string room_notice = 12;
  void clear_room_notice();
  const std::string& room_notice() const;
  void set_room_notice(const std::string& value);
  void set_room_notice(std::string&& value);
  void set_room_notice(const char* value);
  void set_room_notice(const char* value, size_t size);
  std::string* mutable_room_notice();
  std::string* release_room_notice();
  void set_allocated_room_notice(std::string* room_notice);
  private:
  const std::string& _internal_room_notice() const;
  void _internal_set_room_notice(const std::string& value);
  std::string* _internal_mutable_room_notice();
  public:

  // string avatar_url = 13;
  void clear_avatar_url();
  const std::string& avatar_url() const;
  void set_avatar_url(const std::string& value);
  void set_avatar_url(std::string&& value);
  void set_avatar_url(const char* value);
  void set_avatar_url(const char* value, size_t size);
  std::string* mutable_avatar_url();
  std::string* release_avatar_url();
  void set_allocated_avatar_url(std::string* avatar_url);
  private:
  const std::string& _internal_avatar_url() const;
  void _internal_set_avatar_url(const std::string& value);
  std::string* _internal_mutable_avatar_url();
  public:

  // string banner_image_url = 14;
  void clear_banner_image_url();
  const std::string& banner_image_url() const;
  void set_banner_image_url(const std::string& value);
  void set_banner_image_url(std::string&& value);
  void set_banner_image_url(const char* value);
  void set_banner_image_url(const char* value, size_t size);
  std::string* mutable_banner_image_url();
  std::string* release_banner_image_url();
  void set_allocated_banner_image_url(std::string* banner_image_url);
  private:
  const std::string& _internal_banner_image_url() const;
  void _internal_set_banner_image_url(const std::string& value);
  std::string* _internal_mutable_banner_image_url();
  public:

  // uint32 uid = 1;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::uint32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 room_id = 4;
  void clear_room_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 room_id() const;
  void set_room_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_room_id() const;
  void _internal_set_room_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 follower = 5;
  void clear_follower();
  ::PROTOBUF_NAMESPACE_ID::uint32 follower() const;
  void set_follower(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_follower() const;
  void _internal_set_follower(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // int32 follower_daily_increment = 6;
  void clear_follower_daily_increment();
  ::PROTOBUF_NAMESPACE_ID::int32 follower_daily_increment() const;
  void set_follower_daily_increment(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_follower_daily_increment() const;
  void _internal_set_follower_daily_increment(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .vNerve.bilibili.LiveStatus live_status = 8;
  void clear_live_status();
  ::vNerve::bilibili::LiveStatus live_status() const;
  void set_live_status(::vNerve::bilibili::LiveStatus value);
  private:
  ::vNerve::bilibili::LiveStatus _internal_live_status() const;
  void _internal_set_live_status(::vNerve::bilibili::LiveStatus value);
  public:

  // uint32 popularity = 9;
  void clear_popularity();
  ::PROTOBUF_NAMESPACE_ID::uint32 popularity() const;
  void set_popularity(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_popularity() const;
  void _internal_set_popularity(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 rank_area = 10;
  void clear_rank_area();
  ::PROTOBUF_NAMESPACE_ID::uint32 rank_area() const;
  void set_rank_area(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_rank_area() const;
  void _internal_set_rank_area(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 video_count = 15;
  void clear_video_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 video_count() const;
  void set_video_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_video_count() const;
  void _internal_set_video_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 video_total_views = 16;
  void clear_video_total_views();
  ::PROTOBUF_NAMESPACE_ID::uint32 video_total_views() const;
  void set_video_total_views(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_video_total_views() const;
  void _internal_set_video_total_views(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 guard_count = 17;
  void clear_guard_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 guard_count() const;
  void set_guard_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_guard_count() const;
  void _internal_set_guard_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 guard_level1 = 18;
  void clear_guard_level1();
  ::PROTOBUF_NAMESPACE_ID::uint32 guard_level1() const;
  void set_guard_level1(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_guard_level1() const;
  void _internal_set_guard_level1(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 guard_level2 = 19;
  void clear_guard_level2();
  ::PROTOBUF_NAMESPACE_ID::uint32 guard_level2() const;
  void set_guard_level2(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_guard_level2() const;
  void _internal_set_guard_level2(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 guard_level3 = 20;
  void clear_guard_level3();
  ::PROTOBUF_NAMESPACE_ID::uint32 guard_level3() const;
  void set_guard_level3(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_guard_level3() const;
  void _internal_set_guard_level3(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:vNerve.bilibili.BilibiliInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uuid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr room_title_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr room_notice_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr avatar_url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr banner_image_url_;
  ::PROTOBUF_NAMESPACE_ID::uint32 uid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 room_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 follower_;
  ::PROTOBUF_NAMESPACE_ID::int32 follower_daily_increment_;
  int live_status_;
  ::PROTOBUF_NAMESPACE_ID::uint32 popularity_;
  ::PROTOBUF_NAMESPACE_ID::uint32 rank_area_;
  ::PROTOBUF_NAMESPACE_ID::uint32 video_count_;
  ::PROTOBUF_NAMESPACE_ID::uint32 video_total_views_;
  ::PROTOBUF_NAMESPACE_ID::uint32 guard_count_;
  ::PROTOBUF_NAMESPACE_ID::uint32 guard_level1_;
  ::PROTOBUF_NAMESPACE_ID::uint32 guard_level2_;
  ::PROTOBUF_NAMESPACE_ID::uint32 guard_level3_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vNerve_2fbilibili_2fbilibili_5finfo_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GetAllBilibiliInfosRequest

// bool static_only = 1;
inline void GetAllBilibiliInfosRequest::clear_static_only() {
  static_only_ = false;
}
inline bool GetAllBilibiliInfosRequest::_internal_static_only() const {
  return static_only_;
}
inline bool GetAllBilibiliInfosRequest::static_only() const {
  // @@protoc_insertion_point(field_get:vNerve.bilibili.GetAllBilibiliInfosRequest.static_only)
  return _internal_static_only();
}
inline void GetAllBilibiliInfosRequest::_internal_set_static_only(bool value) {
  
  static_only_ = value;
}
inline void GetAllBilibiliInfosRequest::set_static_only(bool value) {
  _internal_set_static_only(value);
  // @@protoc_insertion_point(field_set:vNerve.bilibili.GetAllBilibiliInfosRequest.static_only)
}

// -------------------------------------------------------------------

// GetBilibiliInfoByUidRequest

// uint32 uid = 1;
inline void GetBilibiliInfoByUidRequest::clear_uid() {
  uid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetBilibiliInfoByUidRequest::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetBilibiliInfoByUidRequest::uid() const {
  // @@protoc_insertion_point(field_get:vNerve.bilibili.GetBilibiliInfoByUidRequest.uid)
  return _internal_uid();
}
inline void GetBilibiliInfoByUidRequest::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  uid_ = value;
}
inline void GetBilibiliInfoByUidRequest::set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:vNerve.bilibili.GetBilibiliInfoByUidRequest.uid)
}

// bool static_only = 2;
inline void GetBilibiliInfoByUidRequest::clear_static_only() {
  static_only_ = false;
}
inline bool GetBilibiliInfoByUidRequest::_internal_static_only() const {
  return static_only_;
}
inline bool GetBilibiliInfoByUidRequest::static_only() const {
  // @@protoc_insertion_point(field_get:vNerve.bilibili.GetBilibiliInfoByUidRequest.static_only)
  return _internal_static_only();
}
inline void GetBilibiliInfoByUidRequest::_internal_set_static_only(bool value) {
  
  static_only_ = value;
}
inline void GetBilibiliInfoByUidRequest::set_static_only(bool value) {
  _internal_set_static_only(value);
  // @@protoc_insertion_point(field_set:vNerve.bilibili.GetBilibiliInfoByUidRequest.static_only)
}

// -------------------------------------------------------------------

// BilibiliCollection

// repeated .vNerve.bilibili.BilibiliInfo bilibili_infos = 1;
inline int BilibiliCollection::_internal_bilibili_infos_size() const {
  return bilibili_infos_.size();
}
inline int BilibiliCollection::bilibili_infos_size() const {
  return _internal_bilibili_infos_size();
}
inline void BilibiliCollection::clear_bilibili_infos() {
  bilibili_infos_.Clear();
}
inline ::vNerve::bilibili::BilibiliInfo* BilibiliCollection::mutable_bilibili_infos(int index) {
  // @@protoc_insertion_point(field_mutable:vNerve.bilibili.BilibiliCollection.bilibili_infos)
  return bilibili_infos_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vNerve::bilibili::BilibiliInfo >*
BilibiliCollection::mutable_bilibili_infos() {
  // @@protoc_insertion_point(field_mutable_list:vNerve.bilibili.BilibiliCollection.bilibili_infos)
  return &bilibili_infos_;
}
inline const ::vNerve::bilibili::BilibiliInfo& BilibiliCollection::_internal_bilibili_infos(int index) const {
  return bilibili_infos_.Get(index);
}
inline const ::vNerve::bilibili::BilibiliInfo& BilibiliCollection::bilibili_infos(int index) const {
  // @@protoc_insertion_point(field_get:vNerve.bilibili.BilibiliCollection.bilibili_infos)
  return _internal_bilibili_infos(index);
}
inline ::vNerve::bilibili::BilibiliInfo* BilibiliCollection::_internal_add_bilibili_infos() {
  return bilibili_infos_.Add();
}
inline ::vNerve::bilibili::BilibiliInfo* BilibiliCollection::add_bilibili_infos() {
  // @@protoc_insertion_point(field_add:vNerve.bilibili.BilibiliCollection.bilibili_infos)
  return _internal_add_bilibili_infos();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vNerve::bilibili::BilibiliInfo >&
BilibiliCollection::bilibili_infos() const {
  // @@protoc_insertion_point(field_list:vNerve.bilibili.BilibiliCollection.bilibili_infos)
  return bilibili_infos_;
}

// -------------------------------------------------------------------

// BilibiliInfo

// uint32 uid = 1;
inline void BilibiliInfo::clear_uid() {
  uid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BilibiliInfo::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BilibiliInfo::uid() const {
  // @@protoc_insertion_point(field_get:vNerve.bilibili.BilibiliInfo.uid)
  return _internal_uid();
}
inline void BilibiliInfo::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  uid_ = value;
}
inline void BilibiliInfo::set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:vNerve.bilibili.BilibiliInfo.uid)
}

// string uuid = 2;
inline void BilibiliInfo::clear_uuid() {
  uuid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& BilibiliInfo::uuid() const {
  // @@protoc_insertion_point(field_get:vNerve.bilibili.BilibiliInfo.uuid)
  return _internal_uuid();
}
inline void BilibiliInfo::set_uuid(const std::string& value) {
  _internal_set_uuid(value);
  // @@protoc_insertion_point(field_set:vNerve.bilibili.BilibiliInfo.uuid)
}
inline std::string* BilibiliInfo::mutable_uuid() {
  // @@protoc_insertion_point(field_mutable:vNerve.bilibili.BilibiliInfo.uuid)
  return _internal_mutable_uuid();
}
inline const std::string& BilibiliInfo::_internal_uuid() const {
  return uuid_.GetNoArena();
}
inline void BilibiliInfo::_internal_set_uuid(const std::string& value) {
  
  uuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void BilibiliInfo::set_uuid(std::string&& value) {
  
  uuid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:vNerve.bilibili.BilibiliInfo.uuid)
}
inline void BilibiliInfo::set_uuid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  uuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vNerve.bilibili.BilibiliInfo.uuid)
}
inline void BilibiliInfo::set_uuid(const char* value, size_t size) {
  
  uuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vNerve.bilibili.BilibiliInfo.uuid)
}
inline std::string* BilibiliInfo::_internal_mutable_uuid() {
  
  return uuid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BilibiliInfo::release_uuid() {
  // @@protoc_insertion_point(field_release:vNerve.bilibili.BilibiliInfo.uuid)
  
  return uuid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BilibiliInfo::set_allocated_uuid(std::string* uuid) {
  if (uuid != nullptr) {
    
  } else {
    
  }
  uuid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uuid);
  // @@protoc_insertion_point(field_set_allocated:vNerve.bilibili.BilibiliInfo.uuid)
}

// string uname = 3;
inline void BilibiliInfo::clear_uname() {
  uname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& BilibiliInfo::uname() const {
  // @@protoc_insertion_point(field_get:vNerve.bilibili.BilibiliInfo.uname)
  return _internal_uname();
}
inline void BilibiliInfo::set_uname(const std::string& value) {
  _internal_set_uname(value);
  // @@protoc_insertion_point(field_set:vNerve.bilibili.BilibiliInfo.uname)
}
inline std::string* BilibiliInfo::mutable_uname() {
  // @@protoc_insertion_point(field_mutable:vNerve.bilibili.BilibiliInfo.uname)
  return _internal_mutable_uname();
}
inline const std::string& BilibiliInfo::_internal_uname() const {
  return uname_.GetNoArena();
}
inline void BilibiliInfo::_internal_set_uname(const std::string& value) {
  
  uname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void BilibiliInfo::set_uname(std::string&& value) {
  
  uname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:vNerve.bilibili.BilibiliInfo.uname)
}
inline void BilibiliInfo::set_uname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  uname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vNerve.bilibili.BilibiliInfo.uname)
}
inline void BilibiliInfo::set_uname(const char* value, size_t size) {
  
  uname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vNerve.bilibili.BilibiliInfo.uname)
}
inline std::string* BilibiliInfo::_internal_mutable_uname() {
  
  return uname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BilibiliInfo::release_uname() {
  // @@protoc_insertion_point(field_release:vNerve.bilibili.BilibiliInfo.uname)
  
  return uname_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BilibiliInfo::set_allocated_uname(std::string* uname) {
  if (uname != nullptr) {
    
  } else {
    
  }
  uname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uname);
  // @@protoc_insertion_point(field_set_allocated:vNerve.bilibili.BilibiliInfo.uname)
}

// uint32 room_id = 4;
inline void BilibiliInfo::clear_room_id() {
  room_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BilibiliInfo::_internal_room_id() const {
  return room_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BilibiliInfo::room_id() const {
  // @@protoc_insertion_point(field_get:vNerve.bilibili.BilibiliInfo.room_id)
  return _internal_room_id();
}
inline void BilibiliInfo::_internal_set_room_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  room_id_ = value;
}
inline void BilibiliInfo::set_room_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_room_id(value);
  // @@protoc_insertion_point(field_set:vNerve.bilibili.BilibiliInfo.room_id)
}

// uint32 follower = 5;
inline void BilibiliInfo::clear_follower() {
  follower_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BilibiliInfo::_internal_follower() const {
  return follower_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BilibiliInfo::follower() const {
  // @@protoc_insertion_point(field_get:vNerve.bilibili.BilibiliInfo.follower)
  return _internal_follower();
}
inline void BilibiliInfo::_internal_set_follower(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  follower_ = value;
}
inline void BilibiliInfo::set_follower(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_follower(value);
  // @@protoc_insertion_point(field_set:vNerve.bilibili.BilibiliInfo.follower)
}

// int32 follower_daily_increment = 6;
inline void BilibiliInfo::clear_follower_daily_increment() {
  follower_daily_increment_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BilibiliInfo::_internal_follower_daily_increment() const {
  return follower_daily_increment_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BilibiliInfo::follower_daily_increment() const {
  // @@protoc_insertion_point(field_get:vNerve.bilibili.BilibiliInfo.follower_daily_increment)
  return _internal_follower_daily_increment();
}
inline void BilibiliInfo::_internal_set_follower_daily_increment(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  follower_daily_increment_ = value;
}
inline void BilibiliInfo::set_follower_daily_increment(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_follower_daily_increment(value);
  // @@protoc_insertion_point(field_set:vNerve.bilibili.BilibiliInfo.follower_daily_increment)
}

// string room_title = 7;
inline void BilibiliInfo::clear_room_title() {
  room_title_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& BilibiliInfo::room_title() const {
  // @@protoc_insertion_point(field_get:vNerve.bilibili.BilibiliInfo.room_title)
  return _internal_room_title();
}
inline void BilibiliInfo::set_room_title(const std::string& value) {
  _internal_set_room_title(value);
  // @@protoc_insertion_point(field_set:vNerve.bilibili.BilibiliInfo.room_title)
}
inline std::string* BilibiliInfo::mutable_room_title() {
  // @@protoc_insertion_point(field_mutable:vNerve.bilibili.BilibiliInfo.room_title)
  return _internal_mutable_room_title();
}
inline const std::string& BilibiliInfo::_internal_room_title() const {
  return room_title_.GetNoArena();
}
inline void BilibiliInfo::_internal_set_room_title(const std::string& value) {
  
  room_title_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void BilibiliInfo::set_room_title(std::string&& value) {
  
  room_title_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:vNerve.bilibili.BilibiliInfo.room_title)
}
inline void BilibiliInfo::set_room_title(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  room_title_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vNerve.bilibili.BilibiliInfo.room_title)
}
inline void BilibiliInfo::set_room_title(const char* value, size_t size) {
  
  room_title_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vNerve.bilibili.BilibiliInfo.room_title)
}
inline std::string* BilibiliInfo::_internal_mutable_room_title() {
  
  return room_title_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BilibiliInfo::release_room_title() {
  // @@protoc_insertion_point(field_release:vNerve.bilibili.BilibiliInfo.room_title)
  
  return room_title_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BilibiliInfo::set_allocated_room_title(std::string* room_title) {
  if (room_title != nullptr) {
    
  } else {
    
  }
  room_title_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), room_title);
  // @@protoc_insertion_point(field_set_allocated:vNerve.bilibili.BilibiliInfo.room_title)
}

// .vNerve.bilibili.LiveStatus live_status = 8;
inline void BilibiliInfo::clear_live_status() {
  live_status_ = 0;
}
inline ::vNerve::bilibili::LiveStatus BilibiliInfo::_internal_live_status() const {
  return static_cast< ::vNerve::bilibili::LiveStatus >(live_status_);
}
inline ::vNerve::bilibili::LiveStatus BilibiliInfo::live_status() const {
  // @@protoc_insertion_point(field_get:vNerve.bilibili.BilibiliInfo.live_status)
  return _internal_live_status();
}
inline void BilibiliInfo::_internal_set_live_status(::vNerve::bilibili::LiveStatus value) {
  
  live_status_ = value;
}
inline void BilibiliInfo::set_live_status(::vNerve::bilibili::LiveStatus value) {
  _internal_set_live_status(value);
  // @@protoc_insertion_point(field_set:vNerve.bilibili.BilibiliInfo.live_status)
}

// uint32 popularity = 9;
inline void BilibiliInfo::clear_popularity() {
  popularity_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BilibiliInfo::_internal_popularity() const {
  return popularity_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BilibiliInfo::popularity() const {
  // @@protoc_insertion_point(field_get:vNerve.bilibili.BilibiliInfo.popularity)
  return _internal_popularity();
}
inline void BilibiliInfo::_internal_set_popularity(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  popularity_ = value;
}
inline void BilibiliInfo::set_popularity(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_popularity(value);
  // @@protoc_insertion_point(field_set:vNerve.bilibili.BilibiliInfo.popularity)
}

// uint32 rank_area = 10;
inline void BilibiliInfo::clear_rank_area() {
  rank_area_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BilibiliInfo::_internal_rank_area() const {
  return rank_area_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BilibiliInfo::rank_area() const {
  // @@protoc_insertion_point(field_get:vNerve.bilibili.BilibiliInfo.rank_area)
  return _internal_rank_area();
}
inline void BilibiliInfo::_internal_set_rank_area(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  rank_area_ = value;
}
inline void BilibiliInfo::set_rank_area(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_rank_area(value);
  // @@protoc_insertion_point(field_set:vNerve.bilibili.BilibiliInfo.rank_area)
}

// string description = 11;
inline void BilibiliInfo::clear_description() {
  description_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& BilibiliInfo::description() const {
  // @@protoc_insertion_point(field_get:vNerve.bilibili.BilibiliInfo.description)
  return _internal_description();
}
inline void BilibiliInfo::set_description(const std::string& value) {
  _internal_set_description(value);
  // @@protoc_insertion_point(field_set:vNerve.bilibili.BilibiliInfo.description)
}
inline std::string* BilibiliInfo::mutable_description() {
  // @@protoc_insertion_point(field_mutable:vNerve.bilibili.BilibiliInfo.description)
  return _internal_mutable_description();
}
inline const std::string& BilibiliInfo::_internal_description() const {
  return description_.GetNoArena();
}
inline void BilibiliInfo::_internal_set_description(const std::string& value) {
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void BilibiliInfo::set_description(std::string&& value) {
  
  description_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:vNerve.bilibili.BilibiliInfo.description)
}
inline void BilibiliInfo::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vNerve.bilibili.BilibiliInfo.description)
}
inline void BilibiliInfo::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vNerve.bilibili.BilibiliInfo.description)
}
inline std::string* BilibiliInfo::_internal_mutable_description() {
  
  return description_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BilibiliInfo::release_description() {
  // @@protoc_insertion_point(field_release:vNerve.bilibili.BilibiliInfo.description)
  
  return description_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BilibiliInfo::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:vNerve.bilibili.BilibiliInfo.description)
}

// string room_notice = 12;
inline void BilibiliInfo::clear_room_notice() {
  room_notice_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& BilibiliInfo::room_notice() const {
  // @@protoc_insertion_point(field_get:vNerve.bilibili.BilibiliInfo.room_notice)
  return _internal_room_notice();
}
inline void BilibiliInfo::set_room_notice(const std::string& value) {
  _internal_set_room_notice(value);
  // @@protoc_insertion_point(field_set:vNerve.bilibili.BilibiliInfo.room_notice)
}
inline std::string* BilibiliInfo::mutable_room_notice() {
  // @@protoc_insertion_point(field_mutable:vNerve.bilibili.BilibiliInfo.room_notice)
  return _internal_mutable_room_notice();
}
inline const std::string& BilibiliInfo::_internal_room_notice() const {
  return room_notice_.GetNoArena();
}
inline void BilibiliInfo::_internal_set_room_notice(const std::string& value) {
  
  room_notice_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void BilibiliInfo::set_room_notice(std::string&& value) {
  
  room_notice_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:vNerve.bilibili.BilibiliInfo.room_notice)
}
inline void BilibiliInfo::set_room_notice(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  room_notice_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vNerve.bilibili.BilibiliInfo.room_notice)
}
inline void BilibiliInfo::set_room_notice(const char* value, size_t size) {
  
  room_notice_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vNerve.bilibili.BilibiliInfo.room_notice)
}
inline std::string* BilibiliInfo::_internal_mutable_room_notice() {
  
  return room_notice_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BilibiliInfo::release_room_notice() {
  // @@protoc_insertion_point(field_release:vNerve.bilibili.BilibiliInfo.room_notice)
  
  return room_notice_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BilibiliInfo::set_allocated_room_notice(std::string* room_notice) {
  if (room_notice != nullptr) {
    
  } else {
    
  }
  room_notice_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), room_notice);
  // @@protoc_insertion_point(field_set_allocated:vNerve.bilibili.BilibiliInfo.room_notice)
}

// string avatar_url = 13;
inline void BilibiliInfo::clear_avatar_url() {
  avatar_url_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& BilibiliInfo::avatar_url() const {
  // @@protoc_insertion_point(field_get:vNerve.bilibili.BilibiliInfo.avatar_url)
  return _internal_avatar_url();
}
inline void BilibiliInfo::set_avatar_url(const std::string& value) {
  _internal_set_avatar_url(value);
  // @@protoc_insertion_point(field_set:vNerve.bilibili.BilibiliInfo.avatar_url)
}
inline std::string* BilibiliInfo::mutable_avatar_url() {
  // @@protoc_insertion_point(field_mutable:vNerve.bilibili.BilibiliInfo.avatar_url)
  return _internal_mutable_avatar_url();
}
inline const std::string& BilibiliInfo::_internal_avatar_url() const {
  return avatar_url_.GetNoArena();
}
inline void BilibiliInfo::_internal_set_avatar_url(const std::string& value) {
  
  avatar_url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void BilibiliInfo::set_avatar_url(std::string&& value) {
  
  avatar_url_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:vNerve.bilibili.BilibiliInfo.avatar_url)
}
inline void BilibiliInfo::set_avatar_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  avatar_url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vNerve.bilibili.BilibiliInfo.avatar_url)
}
inline void BilibiliInfo::set_avatar_url(const char* value, size_t size) {
  
  avatar_url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vNerve.bilibili.BilibiliInfo.avatar_url)
}
inline std::string* BilibiliInfo::_internal_mutable_avatar_url() {
  
  return avatar_url_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BilibiliInfo::release_avatar_url() {
  // @@protoc_insertion_point(field_release:vNerve.bilibili.BilibiliInfo.avatar_url)
  
  return avatar_url_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BilibiliInfo::set_allocated_avatar_url(std::string* avatar_url) {
  if (avatar_url != nullptr) {
    
  } else {
    
  }
  avatar_url_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), avatar_url);
  // @@protoc_insertion_point(field_set_allocated:vNerve.bilibili.BilibiliInfo.avatar_url)
}

// string banner_image_url = 14;
inline void BilibiliInfo::clear_banner_image_url() {
  banner_image_url_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& BilibiliInfo::banner_image_url() const {
  // @@protoc_insertion_point(field_get:vNerve.bilibili.BilibiliInfo.banner_image_url)
  return _internal_banner_image_url();
}
inline void BilibiliInfo::set_banner_image_url(const std::string& value) {
  _internal_set_banner_image_url(value);
  // @@protoc_insertion_point(field_set:vNerve.bilibili.BilibiliInfo.banner_image_url)
}
inline std::string* BilibiliInfo::mutable_banner_image_url() {
  // @@protoc_insertion_point(field_mutable:vNerve.bilibili.BilibiliInfo.banner_image_url)
  return _internal_mutable_banner_image_url();
}
inline const std::string& BilibiliInfo::_internal_banner_image_url() const {
  return banner_image_url_.GetNoArena();
}
inline void BilibiliInfo::_internal_set_banner_image_url(const std::string& value) {
  
  banner_image_url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void BilibiliInfo::set_banner_image_url(std::string&& value) {
  
  banner_image_url_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:vNerve.bilibili.BilibiliInfo.banner_image_url)
}
inline void BilibiliInfo::set_banner_image_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  banner_image_url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vNerve.bilibili.BilibiliInfo.banner_image_url)
}
inline void BilibiliInfo::set_banner_image_url(const char* value, size_t size) {
  
  banner_image_url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vNerve.bilibili.BilibiliInfo.banner_image_url)
}
inline std::string* BilibiliInfo::_internal_mutable_banner_image_url() {
  
  return banner_image_url_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BilibiliInfo::release_banner_image_url() {
  // @@protoc_insertion_point(field_release:vNerve.bilibili.BilibiliInfo.banner_image_url)
  
  return banner_image_url_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BilibiliInfo::set_allocated_banner_image_url(std::string* banner_image_url) {
  if (banner_image_url != nullptr) {
    
  } else {
    
  }
  banner_image_url_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), banner_image_url);
  // @@protoc_insertion_point(field_set_allocated:vNerve.bilibili.BilibiliInfo.banner_image_url)
}

// uint32 video_count = 15;
inline void BilibiliInfo::clear_video_count() {
  video_count_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BilibiliInfo::_internal_video_count() const {
  return video_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BilibiliInfo::video_count() const {
  // @@protoc_insertion_point(field_get:vNerve.bilibili.BilibiliInfo.video_count)
  return _internal_video_count();
}
inline void BilibiliInfo::_internal_set_video_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  video_count_ = value;
}
inline void BilibiliInfo::set_video_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_video_count(value);
  // @@protoc_insertion_point(field_set:vNerve.bilibili.BilibiliInfo.video_count)
}

// uint32 video_total_views = 16;
inline void BilibiliInfo::clear_video_total_views() {
  video_total_views_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BilibiliInfo::_internal_video_total_views() const {
  return video_total_views_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BilibiliInfo::video_total_views() const {
  // @@protoc_insertion_point(field_get:vNerve.bilibili.BilibiliInfo.video_total_views)
  return _internal_video_total_views();
}
inline void BilibiliInfo::_internal_set_video_total_views(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  video_total_views_ = value;
}
inline void BilibiliInfo::set_video_total_views(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_video_total_views(value);
  // @@protoc_insertion_point(field_set:vNerve.bilibili.BilibiliInfo.video_total_views)
}

// uint32 guard_count = 17;
inline void BilibiliInfo::clear_guard_count() {
  guard_count_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BilibiliInfo::_internal_guard_count() const {
  return guard_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BilibiliInfo::guard_count() const {
  // @@protoc_insertion_point(field_get:vNerve.bilibili.BilibiliInfo.guard_count)
  return _internal_guard_count();
}
inline void BilibiliInfo::_internal_set_guard_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  guard_count_ = value;
}
inline void BilibiliInfo::set_guard_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_guard_count(value);
  // @@protoc_insertion_point(field_set:vNerve.bilibili.BilibiliInfo.guard_count)
}

// uint32 guard_level1 = 18;
inline void BilibiliInfo::clear_guard_level1() {
  guard_level1_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BilibiliInfo::_internal_guard_level1() const {
  return guard_level1_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BilibiliInfo::guard_level1() const {
  // @@protoc_insertion_point(field_get:vNerve.bilibili.BilibiliInfo.guard_level1)
  return _internal_guard_level1();
}
inline void BilibiliInfo::_internal_set_guard_level1(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  guard_level1_ = value;
}
inline void BilibiliInfo::set_guard_level1(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_guard_level1(value);
  // @@protoc_insertion_point(field_set:vNerve.bilibili.BilibiliInfo.guard_level1)
}

// uint32 guard_level2 = 19;
inline void BilibiliInfo::clear_guard_level2() {
  guard_level2_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BilibiliInfo::_internal_guard_level2() const {
  return guard_level2_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BilibiliInfo::guard_level2() const {
  // @@protoc_insertion_point(field_get:vNerve.bilibili.BilibiliInfo.guard_level2)
  return _internal_guard_level2();
}
inline void BilibiliInfo::_internal_set_guard_level2(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  guard_level2_ = value;
}
inline void BilibiliInfo::set_guard_level2(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_guard_level2(value);
  // @@protoc_insertion_point(field_set:vNerve.bilibili.BilibiliInfo.guard_level2)
}

// uint32 guard_level3 = 20;
inline void BilibiliInfo::clear_guard_level3() {
  guard_level3_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BilibiliInfo::_internal_guard_level3() const {
  return guard_level3_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BilibiliInfo::guard_level3() const {
  // @@protoc_insertion_point(field_get:vNerve.bilibili.BilibiliInfo.guard_level3)
  return _internal_guard_level3();
}
inline void BilibiliInfo::_internal_set_guard_level3(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  guard_level3_ = value;
}
inline void BilibiliInfo::set_guard_level3(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_guard_level3(value);
  // @@protoc_insertion_point(field_set:vNerve.bilibili.BilibiliInfo.guard_level3)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace bilibili
}  // namespace vNerve

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::vNerve::bilibili::LiveStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::vNerve::bilibili::LiveStatus>() {
  return ::vNerve::bilibili::LiveStatus_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_vNerve_2fbilibili_2fbilibili_5finfo_2eproto
