// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vNerve/bilibili/bilibili_info.proto

#include "vNerve/bilibili/bilibili_info.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_vNerve_2fbilibili_2fbilibili_5finfo_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BilibiliInfo_vNerve_2fbilibili_2fbilibili_5finfo_2eproto;
namespace vNerve {
namespace bilibili {
class GetAllBilibiliInfosRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetAllBilibiliInfosRequest> _instance;
} _GetAllBilibiliInfosRequest_default_instance_;
class GetBilibiliInfoByUidRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetBilibiliInfoByUidRequest> _instance;
} _GetBilibiliInfoByUidRequest_default_instance_;
class BilibiliCollectionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BilibiliCollection> _instance;
} _BilibiliCollection_default_instance_;
class BilibiliInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BilibiliInfo> _instance;
} _BilibiliInfo_default_instance_;
}  // namespace bilibili
}  // namespace vNerve
static void InitDefaultsscc_info_BilibiliCollection_vNerve_2fbilibili_2fbilibili_5finfo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vNerve::bilibili::_BilibiliCollection_default_instance_;
    new (ptr) ::vNerve::bilibili::BilibiliCollection();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vNerve::bilibili::BilibiliCollection::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BilibiliCollection_vNerve_2fbilibili_2fbilibili_5finfo_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_BilibiliCollection_vNerve_2fbilibili_2fbilibili_5finfo_2eproto}, {
      &scc_info_BilibiliInfo_vNerve_2fbilibili_2fbilibili_5finfo_2eproto.base,}};

static void InitDefaultsscc_info_BilibiliInfo_vNerve_2fbilibili_2fbilibili_5finfo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vNerve::bilibili::_BilibiliInfo_default_instance_;
    new (ptr) ::vNerve::bilibili::BilibiliInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vNerve::bilibili::BilibiliInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BilibiliInfo_vNerve_2fbilibili_2fbilibili_5finfo_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BilibiliInfo_vNerve_2fbilibili_2fbilibili_5finfo_2eproto}, {}};

static void InitDefaultsscc_info_GetAllBilibiliInfosRequest_vNerve_2fbilibili_2fbilibili_5finfo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vNerve::bilibili::_GetAllBilibiliInfosRequest_default_instance_;
    new (ptr) ::vNerve::bilibili::GetAllBilibiliInfosRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vNerve::bilibili::GetAllBilibiliInfosRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetAllBilibiliInfosRequest_vNerve_2fbilibili_2fbilibili_5finfo_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetAllBilibiliInfosRequest_vNerve_2fbilibili_2fbilibili_5finfo_2eproto}, {}};

static void InitDefaultsscc_info_GetBilibiliInfoByUidRequest_vNerve_2fbilibili_2fbilibili_5finfo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vNerve::bilibili::_GetBilibiliInfoByUidRequest_default_instance_;
    new (ptr) ::vNerve::bilibili::GetBilibiliInfoByUidRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vNerve::bilibili::GetBilibiliInfoByUidRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetBilibiliInfoByUidRequest_vNerve_2fbilibili_2fbilibili_5finfo_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetBilibiliInfoByUidRequest_vNerve_2fbilibili_2fbilibili_5finfo_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_vNerve_2fbilibili_2fbilibili_5finfo_2eproto[4];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_vNerve_2fbilibili_2fbilibili_5finfo_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_vNerve_2fbilibili_2fbilibili_5finfo_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_vNerve_2fbilibili_2fbilibili_5finfo_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vNerve::bilibili::GetAllBilibiliInfosRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vNerve::bilibili::GetAllBilibiliInfosRequest, static_only_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vNerve::bilibili::GetBilibiliInfoByUidRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vNerve::bilibili::GetBilibiliInfoByUidRequest, uid_),
  PROTOBUF_FIELD_OFFSET(::vNerve::bilibili::GetBilibiliInfoByUidRequest, static_only_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vNerve::bilibili::BilibiliCollection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vNerve::bilibili::BilibiliCollection, bilibili_infos_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vNerve::bilibili::BilibiliInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vNerve::bilibili::BilibiliInfo, uid_),
  PROTOBUF_FIELD_OFFSET(::vNerve::bilibili::BilibiliInfo, uuid_),
  PROTOBUF_FIELD_OFFSET(::vNerve::bilibili::BilibiliInfo, uname_),
  PROTOBUF_FIELD_OFFSET(::vNerve::bilibili::BilibiliInfo, room_id_),
  PROTOBUF_FIELD_OFFSET(::vNerve::bilibili::BilibiliInfo, follower_),
  PROTOBUF_FIELD_OFFSET(::vNerve::bilibili::BilibiliInfo, follower_daily_increment_),
  PROTOBUF_FIELD_OFFSET(::vNerve::bilibili::BilibiliInfo, room_title_),
  PROTOBUF_FIELD_OFFSET(::vNerve::bilibili::BilibiliInfo, live_status_),
  PROTOBUF_FIELD_OFFSET(::vNerve::bilibili::BilibiliInfo, popularity_),
  PROTOBUF_FIELD_OFFSET(::vNerve::bilibili::BilibiliInfo, rank_area_),
  PROTOBUF_FIELD_OFFSET(::vNerve::bilibili::BilibiliInfo, description_),
  PROTOBUF_FIELD_OFFSET(::vNerve::bilibili::BilibiliInfo, room_notice_),
  PROTOBUF_FIELD_OFFSET(::vNerve::bilibili::BilibiliInfo, avatar_url_),
  PROTOBUF_FIELD_OFFSET(::vNerve::bilibili::BilibiliInfo, banner_image_url_),
  PROTOBUF_FIELD_OFFSET(::vNerve::bilibili::BilibiliInfo, video_count_),
  PROTOBUF_FIELD_OFFSET(::vNerve::bilibili::BilibiliInfo, video_total_views_),
  PROTOBUF_FIELD_OFFSET(::vNerve::bilibili::BilibiliInfo, guard_count_),
  PROTOBUF_FIELD_OFFSET(::vNerve::bilibili::BilibiliInfo, guard_level1_),
  PROTOBUF_FIELD_OFFSET(::vNerve::bilibili::BilibiliInfo, guard_level2_),
  PROTOBUF_FIELD_OFFSET(::vNerve::bilibili::BilibiliInfo, guard_level3_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::vNerve::bilibili::GetAllBilibiliInfosRequest)},
  { 6, -1, sizeof(::vNerve::bilibili::GetBilibiliInfoByUidRequest)},
  { 13, -1, sizeof(::vNerve::bilibili::BilibiliCollection)},
  { 19, -1, sizeof(::vNerve::bilibili::BilibiliInfo)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vNerve::bilibili::_GetAllBilibiliInfosRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vNerve::bilibili::_GetBilibiliInfoByUidRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vNerve::bilibili::_BilibiliCollection_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vNerve::bilibili::_BilibiliInfo_default_instance_),
};

const char descriptor_table_protodef_vNerve_2fbilibili_2fbilibili_5finfo_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n#vNerve/bilibili/bilibili_info.proto\022\017v"
  "Nerve.bilibili\"1\n\032GetAllBilibiliInfosReq"
  "uest\022\023\n\013static_only\030\001 \001(\010\"\?\n\033GetBilibili"
  "InfoByUidRequest\022\013\n\003uid\030\001 \001(\r\022\023\n\013static_"
  "only\030\002 \001(\010\"K\n\022BilibiliCollection\0225\n\016bili"
  "bili_infos\030\001 \003(\0132\035.vNerve.bilibili.Bilib"
  "iliInfo\"\311\003\n\014BilibiliInfo\022\013\n\003uid\030\001 \001(\r\022\014\n"
  "\004uuid\030\002 \001(\t\022\r\n\005uname\030\003 \001(\t\022\017\n\007room_id\030\004 "
  "\001(\r\022\020\n\010follower\030\005 \001(\r\022 \n\030follower_daily_"
  "increment\030\006 \001(\005\022\022\n\nroom_title\030\007 \001(\t\0220\n\013l"
  "ive_status\030\010 \001(\0162\033.vNerve.bilibili.LiveS"
  "tatus\022\022\n\npopularity\030\t \001(\r\022\021\n\trank_area\030\n"
  " \001(\r\022\023\n\013description\030\013 \001(\t\022\023\n\013room_notice"
  "\030\014 \001(\t\022\022\n\navatar_url\030\r \001(\t\022\030\n\020banner_ima"
  "ge_url\030\016 \001(\t\022\023\n\013video_count\030\017 \001(\r\022\031\n\021vid"
  "eo_total_views\030\020 \001(\r\022\023\n\013guard_count\030\021 \001("
  "\r\022\024\n\014guard_level1\030\022 \001(\r\022\024\n\014guard_level2\030"
  "\023 \001(\r\022\024\n\014guard_level3\030\024 \001(\r*=\n\nLiveStatu"
  "s\022\r\n\tPREPARING\020\000\022\010\n\004LIVE\020\001\022\t\n\005ROUND\020\002\022\013\n"
  "\007CUT_OFF\020\0032\330\001\n\010Bilibili\022g\n\023GetAllBilibil"
  "iInfos\022+.vNerve.bilibili.GetAllBilibiliI"
  "nfosRequest\032#.vNerve.bilibili.BilibiliCo"
  "llection\022c\n\024GetBilibiliInfoByUid\022,.vNerv"
  "e.bilibili.GetBilibiliInfoByUidRequest\032\035"
  ".vNerve.bilibili.BilibiliInfob\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_vNerve_2fbilibili_2fbilibili_5finfo_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_vNerve_2fbilibili_2fbilibili_5finfo_2eproto_sccs[4] = {
  &scc_info_BilibiliCollection_vNerve_2fbilibili_2fbilibili_5finfo_2eproto.base,
  &scc_info_BilibiliInfo_vNerve_2fbilibili_2fbilibili_5finfo_2eproto.base,
  &scc_info_GetAllBilibiliInfosRequest_vNerve_2fbilibili_2fbilibili_5finfo_2eproto.base,
  &scc_info_GetBilibiliInfoByUidRequest_vNerve_2fbilibili_2fbilibili_5finfo_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_vNerve_2fbilibili_2fbilibili_5finfo_2eproto_once;
static bool descriptor_table_vNerve_2fbilibili_2fbilibili_5finfo_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_vNerve_2fbilibili_2fbilibili_5finfo_2eproto = {
  &descriptor_table_vNerve_2fbilibili_2fbilibili_5finfo_2eproto_initialized, descriptor_table_protodef_vNerve_2fbilibili_2fbilibili_5finfo_2eproto, "vNerve/bilibili/bilibili_info.proto", 997,
  &descriptor_table_vNerve_2fbilibili_2fbilibili_5finfo_2eproto_once, descriptor_table_vNerve_2fbilibili_2fbilibili_5finfo_2eproto_sccs, descriptor_table_vNerve_2fbilibili_2fbilibili_5finfo_2eproto_deps, 4, 0,
  schemas, file_default_instances, TableStruct_vNerve_2fbilibili_2fbilibili_5finfo_2eproto::offsets,
  file_level_metadata_vNerve_2fbilibili_2fbilibili_5finfo_2eproto, 4, file_level_enum_descriptors_vNerve_2fbilibili_2fbilibili_5finfo_2eproto, file_level_service_descriptors_vNerve_2fbilibili_2fbilibili_5finfo_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_vNerve_2fbilibili_2fbilibili_5finfo_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_vNerve_2fbilibili_2fbilibili_5finfo_2eproto), true);
namespace vNerve {
namespace bilibili {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LiveStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_vNerve_2fbilibili_2fbilibili_5finfo_2eproto);
  return file_level_enum_descriptors_vNerve_2fbilibili_2fbilibili_5finfo_2eproto[0];
}
bool LiveStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void GetAllBilibiliInfosRequest::InitAsDefaultInstance() {
}
class GetAllBilibiliInfosRequest::_Internal {
 public:
};

GetAllBilibiliInfosRequest::GetAllBilibiliInfosRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vNerve.bilibili.GetAllBilibiliInfosRequest)
}
GetAllBilibiliInfosRequest::GetAllBilibiliInfosRequest(const GetAllBilibiliInfosRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  static_only_ = from.static_only_;
  // @@protoc_insertion_point(copy_constructor:vNerve.bilibili.GetAllBilibiliInfosRequest)
}

void GetAllBilibiliInfosRequest::SharedCtor() {
  static_only_ = false;
}

GetAllBilibiliInfosRequest::~GetAllBilibiliInfosRequest() {
  // @@protoc_insertion_point(destructor:vNerve.bilibili.GetAllBilibiliInfosRequest)
  SharedDtor();
}

void GetAllBilibiliInfosRequest::SharedDtor() {
}

void GetAllBilibiliInfosRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetAllBilibiliInfosRequest& GetAllBilibiliInfosRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetAllBilibiliInfosRequest_vNerve_2fbilibili_2fbilibili_5finfo_2eproto.base);
  return *internal_default_instance();
}


void GetAllBilibiliInfosRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:vNerve.bilibili.GetAllBilibiliInfosRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  static_only_ = false;
  _internal_metadata_.Clear();
}

const char* GetAllBilibiliInfosRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool static_only = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          static_only_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetAllBilibiliInfosRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vNerve.bilibili.GetAllBilibiliInfosRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool static_only = 1;
  if (this->static_only() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_static_only(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vNerve.bilibili.GetAllBilibiliInfosRequest)
  return target;
}

size_t GetAllBilibiliInfosRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vNerve.bilibili.GetAllBilibiliInfosRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool static_only = 1;
  if (this->static_only() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetAllBilibiliInfosRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vNerve.bilibili.GetAllBilibiliInfosRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetAllBilibiliInfosRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetAllBilibiliInfosRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vNerve.bilibili.GetAllBilibiliInfosRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vNerve.bilibili.GetAllBilibiliInfosRequest)
    MergeFrom(*source);
  }
}

void GetAllBilibiliInfosRequest::MergeFrom(const GetAllBilibiliInfosRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vNerve.bilibili.GetAllBilibiliInfosRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.static_only() != 0) {
    _internal_set_static_only(from._internal_static_only());
  }
}

void GetAllBilibiliInfosRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vNerve.bilibili.GetAllBilibiliInfosRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAllBilibiliInfosRequest::CopyFrom(const GetAllBilibiliInfosRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vNerve.bilibili.GetAllBilibiliInfosRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAllBilibiliInfosRequest::IsInitialized() const {
  return true;
}

void GetAllBilibiliInfosRequest::InternalSwap(GetAllBilibiliInfosRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(static_only_, other->static_only_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetAllBilibiliInfosRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetBilibiliInfoByUidRequest::InitAsDefaultInstance() {
}
class GetBilibiliInfoByUidRequest::_Internal {
 public:
};

GetBilibiliInfoByUidRequest::GetBilibiliInfoByUidRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vNerve.bilibili.GetBilibiliInfoByUidRequest)
}
GetBilibiliInfoByUidRequest::GetBilibiliInfoByUidRequest(const GetBilibiliInfoByUidRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&uid_, &from.uid_,
    static_cast<size_t>(reinterpret_cast<char*>(&static_only_) -
    reinterpret_cast<char*>(&uid_)) + sizeof(static_only_));
  // @@protoc_insertion_point(copy_constructor:vNerve.bilibili.GetBilibiliInfoByUidRequest)
}

void GetBilibiliInfoByUidRequest::SharedCtor() {
  ::memset(&uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&static_only_) -
      reinterpret_cast<char*>(&uid_)) + sizeof(static_only_));
}

GetBilibiliInfoByUidRequest::~GetBilibiliInfoByUidRequest() {
  // @@protoc_insertion_point(destructor:vNerve.bilibili.GetBilibiliInfoByUidRequest)
  SharedDtor();
}

void GetBilibiliInfoByUidRequest::SharedDtor() {
}

void GetBilibiliInfoByUidRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetBilibiliInfoByUidRequest& GetBilibiliInfoByUidRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetBilibiliInfoByUidRequest_vNerve_2fbilibili_2fbilibili_5finfo_2eproto.base);
  return *internal_default_instance();
}


void GetBilibiliInfoByUidRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:vNerve.bilibili.GetBilibiliInfoByUidRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&static_only_) -
      reinterpret_cast<char*>(&uid_)) + sizeof(static_only_));
  _internal_metadata_.Clear();
}

const char* GetBilibiliInfoByUidRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool static_only = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          static_only_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetBilibiliInfoByUidRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vNerve.bilibili.GetBilibiliInfoByUidRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 uid = 1;
  if (this->uid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_uid(), target);
  }

  // bool static_only = 2;
  if (this->static_only() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_static_only(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vNerve.bilibili.GetBilibiliInfoByUidRequest)
  return target;
}

size_t GetBilibiliInfoByUidRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vNerve.bilibili.GetBilibiliInfoByUidRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 uid = 1;
  if (this->uid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_uid());
  }

  // bool static_only = 2;
  if (this->static_only() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetBilibiliInfoByUidRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vNerve.bilibili.GetBilibiliInfoByUidRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetBilibiliInfoByUidRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetBilibiliInfoByUidRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vNerve.bilibili.GetBilibiliInfoByUidRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vNerve.bilibili.GetBilibiliInfoByUidRequest)
    MergeFrom(*source);
  }
}

void GetBilibiliInfoByUidRequest::MergeFrom(const GetBilibiliInfoByUidRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vNerve.bilibili.GetBilibiliInfoByUidRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.uid() != 0) {
    _internal_set_uid(from._internal_uid());
  }
  if (from.static_only() != 0) {
    _internal_set_static_only(from._internal_static_only());
  }
}

void GetBilibiliInfoByUidRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vNerve.bilibili.GetBilibiliInfoByUidRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetBilibiliInfoByUidRequest::CopyFrom(const GetBilibiliInfoByUidRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vNerve.bilibili.GetBilibiliInfoByUidRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetBilibiliInfoByUidRequest::IsInitialized() const {
  return true;
}

void GetBilibiliInfoByUidRequest::InternalSwap(GetBilibiliInfoByUidRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(uid_, other->uid_);
  swap(static_only_, other->static_only_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetBilibiliInfoByUidRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BilibiliCollection::InitAsDefaultInstance() {
}
class BilibiliCollection::_Internal {
 public:
};

BilibiliCollection::BilibiliCollection()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vNerve.bilibili.BilibiliCollection)
}
BilibiliCollection::BilibiliCollection(const BilibiliCollection& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      bilibili_infos_(from.bilibili_infos_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:vNerve.bilibili.BilibiliCollection)
}

void BilibiliCollection::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BilibiliCollection_vNerve_2fbilibili_2fbilibili_5finfo_2eproto.base);
}

BilibiliCollection::~BilibiliCollection() {
  // @@protoc_insertion_point(destructor:vNerve.bilibili.BilibiliCollection)
  SharedDtor();
}

void BilibiliCollection::SharedDtor() {
}

void BilibiliCollection::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BilibiliCollection& BilibiliCollection::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BilibiliCollection_vNerve_2fbilibili_2fbilibili_5finfo_2eproto.base);
  return *internal_default_instance();
}


void BilibiliCollection::Clear() {
// @@protoc_insertion_point(message_clear_start:vNerve.bilibili.BilibiliCollection)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bilibili_infos_.Clear();
  _internal_metadata_.Clear();
}

const char* BilibiliCollection::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .vNerve.bilibili.BilibiliInfo bilibili_infos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_bilibili_infos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BilibiliCollection::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vNerve.bilibili.BilibiliCollection)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .vNerve.bilibili.BilibiliInfo bilibili_infos = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_bilibili_infos_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_bilibili_infos(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vNerve.bilibili.BilibiliCollection)
  return target;
}

size_t BilibiliCollection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vNerve.bilibili.BilibiliCollection)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vNerve.bilibili.BilibiliInfo bilibili_infos = 1;
  total_size += 1UL * this->_internal_bilibili_infos_size();
  for (const auto& msg : this->bilibili_infos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BilibiliCollection::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vNerve.bilibili.BilibiliCollection)
  GOOGLE_DCHECK_NE(&from, this);
  const BilibiliCollection* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BilibiliCollection>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vNerve.bilibili.BilibiliCollection)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vNerve.bilibili.BilibiliCollection)
    MergeFrom(*source);
  }
}

void BilibiliCollection::MergeFrom(const BilibiliCollection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vNerve.bilibili.BilibiliCollection)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  bilibili_infos_.MergeFrom(from.bilibili_infos_);
}

void BilibiliCollection::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vNerve.bilibili.BilibiliCollection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BilibiliCollection::CopyFrom(const BilibiliCollection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vNerve.bilibili.BilibiliCollection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BilibiliCollection::IsInitialized() const {
  return true;
}

void BilibiliCollection::InternalSwap(BilibiliCollection* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  bilibili_infos_.InternalSwap(&other->bilibili_infos_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BilibiliCollection::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BilibiliInfo::InitAsDefaultInstance() {
}
class BilibiliInfo::_Internal {
 public:
};

BilibiliInfo::BilibiliInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vNerve.bilibili.BilibiliInfo)
}
BilibiliInfo::BilibiliInfo(const BilibiliInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  uuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_uuid().empty()) {
    uuid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.uuid_);
  }
  uname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_uname().empty()) {
    uname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.uname_);
  }
  room_title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_room_title().empty()) {
    room_title_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.room_title_);
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_description().empty()) {
    description_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  room_notice_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_room_notice().empty()) {
    room_notice_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.room_notice_);
  }
  avatar_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_avatar_url().empty()) {
    avatar_url_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.avatar_url_);
  }
  banner_image_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_banner_image_url().empty()) {
    banner_image_url_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.banner_image_url_);
  }
  ::memcpy(&uid_, &from.uid_,
    static_cast<size_t>(reinterpret_cast<char*>(&guard_level3_) -
    reinterpret_cast<char*>(&uid_)) + sizeof(guard_level3_));
  // @@protoc_insertion_point(copy_constructor:vNerve.bilibili.BilibiliInfo)
}

void BilibiliInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BilibiliInfo_vNerve_2fbilibili_2fbilibili_5finfo_2eproto.base);
  uuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  uname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  room_title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  room_notice_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  avatar_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  banner_image_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&guard_level3_) -
      reinterpret_cast<char*>(&uid_)) + sizeof(guard_level3_));
}

BilibiliInfo::~BilibiliInfo() {
  // @@protoc_insertion_point(destructor:vNerve.bilibili.BilibiliInfo)
  SharedDtor();
}

void BilibiliInfo::SharedDtor() {
  uuid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  uname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  room_title_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  room_notice_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  avatar_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  banner_image_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BilibiliInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BilibiliInfo& BilibiliInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BilibiliInfo_vNerve_2fbilibili_2fbilibili_5finfo_2eproto.base);
  return *internal_default_instance();
}


void BilibiliInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:vNerve.bilibili.BilibiliInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  uuid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  uname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  room_title_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  room_notice_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  avatar_url_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  banner_image_url_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&guard_level3_) -
      reinterpret_cast<char*>(&uid_)) + sizeof(guard_level3_));
  _internal_metadata_.Clear();
}

const char* BilibiliInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string uuid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_uuid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vNerve.bilibili.BilibiliInfo.uuid"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string uname = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_uname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vNerve.bilibili.BilibiliInfo.uname"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 room_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          room_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 follower = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          follower_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 follower_daily_increment = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          follower_daily_increment_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string room_title = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_room_title();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vNerve.bilibili.BilibiliInfo.room_title"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vNerve.bilibili.LiveStatus live_status = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_live_status(static_cast<::vNerve::bilibili::LiveStatus>(val));
        } else goto handle_unusual;
        continue;
      // uint32 popularity = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          popularity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 rank_area = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          rank_area_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string description = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vNerve.bilibili.BilibiliInfo.description"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string room_notice = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_room_notice();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vNerve.bilibili.BilibiliInfo.room_notice"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string avatar_url = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          auto str = _internal_mutable_avatar_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vNerve.bilibili.BilibiliInfo.avatar_url"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string banner_image_url = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          auto str = _internal_mutable_banner_image_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vNerve.bilibili.BilibiliInfo.banner_image_url"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 video_count = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          video_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 video_total_views = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          video_total_views_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 guard_count = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          guard_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 guard_level1 = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          guard_level1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 guard_level2 = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          guard_level2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 guard_level3 = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          guard_level3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BilibiliInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vNerve.bilibili.BilibiliInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 uid = 1;
  if (this->uid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_uid(), target);
  }

  // string uuid = 2;
  if (this->uuid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_uuid().data(), static_cast<int>(this->_internal_uuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vNerve.bilibili.BilibiliInfo.uuid");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_uuid(), target);
  }

  // string uname = 3;
  if (this->uname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_uname().data(), static_cast<int>(this->_internal_uname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vNerve.bilibili.BilibiliInfo.uname");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_uname(), target);
  }

  // uint32 room_id = 4;
  if (this->room_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_room_id(), target);
  }

  // uint32 follower = 5;
  if (this->follower() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_follower(), target);
  }

  // int32 follower_daily_increment = 6;
  if (this->follower_daily_increment() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_follower_daily_increment(), target);
  }

  // string room_title = 7;
  if (this->room_title().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_room_title().data(), static_cast<int>(this->_internal_room_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vNerve.bilibili.BilibiliInfo.room_title");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_room_title(), target);
  }

  // .vNerve.bilibili.LiveStatus live_status = 8;
  if (this->live_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      8, this->_internal_live_status(), target);
  }

  // uint32 popularity = 9;
  if (this->popularity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_popularity(), target);
  }

  // uint32 rank_area = 10;
  if (this->rank_area() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_rank_area(), target);
  }

  // string description = 11;
  if (this->description().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vNerve.bilibili.BilibiliInfo.description");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_description(), target);
  }

  // string room_notice = 12;
  if (this->room_notice().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_room_notice().data(), static_cast<int>(this->_internal_room_notice().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vNerve.bilibili.BilibiliInfo.room_notice");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_room_notice(), target);
  }

  // string avatar_url = 13;
  if (this->avatar_url().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_avatar_url().data(), static_cast<int>(this->_internal_avatar_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vNerve.bilibili.BilibiliInfo.avatar_url");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_avatar_url(), target);
  }

  // string banner_image_url = 14;
  if (this->banner_image_url().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_banner_image_url().data(), static_cast<int>(this->_internal_banner_image_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vNerve.bilibili.BilibiliInfo.banner_image_url");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_banner_image_url(), target);
  }

  // uint32 video_count = 15;
  if (this->video_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(15, this->_internal_video_count(), target);
  }

  // uint32 video_total_views = 16;
  if (this->video_total_views() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(16, this->_internal_video_total_views(), target);
  }

  // uint32 guard_count = 17;
  if (this->guard_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(17, this->_internal_guard_count(), target);
  }

  // uint32 guard_level1 = 18;
  if (this->guard_level1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(18, this->_internal_guard_level1(), target);
  }

  // uint32 guard_level2 = 19;
  if (this->guard_level2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(19, this->_internal_guard_level2(), target);
  }

  // uint32 guard_level3 = 20;
  if (this->guard_level3() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(20, this->_internal_guard_level3(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vNerve.bilibili.BilibiliInfo)
  return target;
}

size_t BilibiliInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vNerve.bilibili.BilibiliInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string uuid = 2;
  if (this->uuid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_uuid());
  }

  // string uname = 3;
  if (this->uname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_uname());
  }

  // string room_title = 7;
  if (this->room_title().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_room_title());
  }

  // string description = 11;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // string room_notice = 12;
  if (this->room_notice().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_room_notice());
  }

  // string avatar_url = 13;
  if (this->avatar_url().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_avatar_url());
  }

  // string banner_image_url = 14;
  if (this->banner_image_url().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_banner_image_url());
  }

  // uint32 uid = 1;
  if (this->uid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_uid());
  }

  // uint32 room_id = 4;
  if (this->room_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_room_id());
  }

  // uint32 follower = 5;
  if (this->follower() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_follower());
  }

  // int32 follower_daily_increment = 6;
  if (this->follower_daily_increment() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_follower_daily_increment());
  }

  // .vNerve.bilibili.LiveStatus live_status = 8;
  if (this->live_status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_live_status());
  }

  // uint32 popularity = 9;
  if (this->popularity() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_popularity());
  }

  // uint32 rank_area = 10;
  if (this->rank_area() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_rank_area());
  }

  // uint32 video_count = 15;
  if (this->video_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_video_count());
  }

  // uint32 video_total_views = 16;
  if (this->video_total_views() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_video_total_views());
  }

  // uint32 guard_count = 17;
  if (this->guard_count() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_guard_count());
  }

  // uint32 guard_level1 = 18;
  if (this->guard_level1() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_guard_level1());
  }

  // uint32 guard_level2 = 19;
  if (this->guard_level2() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_guard_level2());
  }

  // uint32 guard_level3 = 20;
  if (this->guard_level3() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_guard_level3());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BilibiliInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vNerve.bilibili.BilibiliInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const BilibiliInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BilibiliInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vNerve.bilibili.BilibiliInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vNerve.bilibili.BilibiliInfo)
    MergeFrom(*source);
  }
}

void BilibiliInfo::MergeFrom(const BilibiliInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vNerve.bilibili.BilibiliInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.uuid().size() > 0) {

    uuid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.uuid_);
  }
  if (from.uname().size() > 0) {

    uname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.uname_);
  }
  if (from.room_title().size() > 0) {

    room_title_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.room_title_);
  }
  if (from.description().size() > 0) {

    description_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  if (from.room_notice().size() > 0) {

    room_notice_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.room_notice_);
  }
  if (from.avatar_url().size() > 0) {

    avatar_url_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.avatar_url_);
  }
  if (from.banner_image_url().size() > 0) {

    banner_image_url_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.banner_image_url_);
  }
  if (from.uid() != 0) {
    _internal_set_uid(from._internal_uid());
  }
  if (from.room_id() != 0) {
    _internal_set_room_id(from._internal_room_id());
  }
  if (from.follower() != 0) {
    _internal_set_follower(from._internal_follower());
  }
  if (from.follower_daily_increment() != 0) {
    _internal_set_follower_daily_increment(from._internal_follower_daily_increment());
  }
  if (from.live_status() != 0) {
    _internal_set_live_status(from._internal_live_status());
  }
  if (from.popularity() != 0) {
    _internal_set_popularity(from._internal_popularity());
  }
  if (from.rank_area() != 0) {
    _internal_set_rank_area(from._internal_rank_area());
  }
  if (from.video_count() != 0) {
    _internal_set_video_count(from._internal_video_count());
  }
  if (from.video_total_views() != 0) {
    _internal_set_video_total_views(from._internal_video_total_views());
  }
  if (from.guard_count() != 0) {
    _internal_set_guard_count(from._internal_guard_count());
  }
  if (from.guard_level1() != 0) {
    _internal_set_guard_level1(from._internal_guard_level1());
  }
  if (from.guard_level2() != 0) {
    _internal_set_guard_level2(from._internal_guard_level2());
  }
  if (from.guard_level3() != 0) {
    _internal_set_guard_level3(from._internal_guard_level3());
  }
}

void BilibiliInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vNerve.bilibili.BilibiliInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BilibiliInfo::CopyFrom(const BilibiliInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vNerve.bilibili.BilibiliInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BilibiliInfo::IsInitialized() const {
  return true;
}

void BilibiliInfo::InternalSwap(BilibiliInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  uuid_.Swap(&other->uuid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  uname_.Swap(&other->uname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  room_title_.Swap(&other->room_title_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  description_.Swap(&other->description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  room_notice_.Swap(&other->room_notice_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  avatar_url_.Swap(&other->avatar_url_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  banner_image_url_.Swap(&other->banner_image_url_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(uid_, other->uid_);
  swap(room_id_, other->room_id_);
  swap(follower_, other->follower_);
  swap(follower_daily_increment_, other->follower_daily_increment_);
  swap(live_status_, other->live_status_);
  swap(popularity_, other->popularity_);
  swap(rank_area_, other->rank_area_);
  swap(video_count_, other->video_count_);
  swap(video_total_views_, other->video_total_views_);
  swap(guard_count_, other->guard_count_);
  swap(guard_level1_, other->guard_level1_);
  swap(guard_level2_, other->guard_level2_);
  swap(guard_level3_, other->guard_level3_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BilibiliInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace bilibili
}  // namespace vNerve
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::vNerve::bilibili::GetAllBilibiliInfosRequest* Arena::CreateMaybeMessage< ::vNerve::bilibili::GetAllBilibiliInfosRequest >(Arena* arena) {
  return Arena::CreateInternal< ::vNerve::bilibili::GetAllBilibiliInfosRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::vNerve::bilibili::GetBilibiliInfoByUidRequest* Arena::CreateMaybeMessage< ::vNerve::bilibili::GetBilibiliInfoByUidRequest >(Arena* arena) {
  return Arena::CreateInternal< ::vNerve::bilibili::GetBilibiliInfoByUidRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::vNerve::bilibili::BilibiliCollection* Arena::CreateMaybeMessage< ::vNerve::bilibili::BilibiliCollection >(Arena* arena) {
  return Arena::CreateInternal< ::vNerve::bilibili::BilibiliCollection >(arena);
}
template<> PROTOBUF_NOINLINE ::vNerve::bilibili::BilibiliInfo* Arena::CreateMaybeMessage< ::vNerve::bilibili::BilibiliInfo >(Arena* arena) {
  return Arena::CreateInternal< ::vNerve::bilibili::BilibiliInfo >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
