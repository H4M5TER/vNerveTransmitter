// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: vNerve/vdb/vdb.proto

#include "vNerve/vdb/vdb.pb.h"
#include "vNerve/vdb/vdb.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace vNerve {
namespace vdb {

static const char* VtuberDatabase_method_names[] = {
  "/vNerve.vdb.VtuberDatabase/GetAllVtubers",
  "/vNerve.vdb.VtuberDatabase/GetAllGroups",
  "/vNerve.vdb.VtuberDatabase/GetAllFans",
  "/vNerve.vdb.VtuberDatabase/GetLinkSyntaxs",
};

std::unique_ptr< VtuberDatabase::Stub> VtuberDatabase::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< VtuberDatabase::Stub> stub(new VtuberDatabase::Stub(channel));
  return stub;
}

VtuberDatabase::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_GetAllVtubers_(VtuberDatabase_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetAllGroups_(VtuberDatabase_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetAllFans_(VtuberDatabase_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetLinkSyntaxs_(VtuberDatabase_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status VtuberDatabase::Stub::GetAllVtubers(::grpc::ClientContext* context, const ::vNerve::vdb::GetVtbsRequest& request, ::vNerve::vdb::VtuberCollection* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetAllVtubers_, context, request, response);
}

void VtuberDatabase::Stub::experimental_async::GetAllVtubers(::grpc::ClientContext* context, const ::vNerve::vdb::GetVtbsRequest* request, ::vNerve::vdb::VtuberCollection* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetAllVtubers_, context, request, response, std::move(f));
}

void VtuberDatabase::Stub::experimental_async::GetAllVtubers(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::vNerve::vdb::VtuberCollection* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetAllVtubers_, context, request, response, std::move(f));
}

void VtuberDatabase::Stub::experimental_async::GetAllVtubers(::grpc::ClientContext* context, const ::vNerve::vdb::GetVtbsRequest* request, ::vNerve::vdb::VtuberCollection* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetAllVtubers_, context, request, response, reactor);
}

void VtuberDatabase::Stub::experimental_async::GetAllVtubers(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::vNerve::vdb::VtuberCollection* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetAllVtubers_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::vNerve::vdb::VtuberCollection>* VtuberDatabase::Stub::AsyncGetAllVtubersRaw(::grpc::ClientContext* context, const ::vNerve::vdb::GetVtbsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::vNerve::vdb::VtuberCollection>::Create(channel_.get(), cq, rpcmethod_GetAllVtubers_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::vNerve::vdb::VtuberCollection>* VtuberDatabase::Stub::PrepareAsyncGetAllVtubersRaw(::grpc::ClientContext* context, const ::vNerve::vdb::GetVtbsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::vNerve::vdb::VtuberCollection>::Create(channel_.get(), cq, rpcmethod_GetAllVtubers_, context, request, false);
}

::grpc::Status VtuberDatabase::Stub::GetAllGroups(::grpc::ClientContext* context, const ::vNerve::vdb::GetVtbsRequest& request, ::vNerve::vdb::GroupCollection* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetAllGroups_, context, request, response);
}

void VtuberDatabase::Stub::experimental_async::GetAllGroups(::grpc::ClientContext* context, const ::vNerve::vdb::GetVtbsRequest* request, ::vNerve::vdb::GroupCollection* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetAllGroups_, context, request, response, std::move(f));
}

void VtuberDatabase::Stub::experimental_async::GetAllGroups(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::vNerve::vdb::GroupCollection* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetAllGroups_, context, request, response, std::move(f));
}

void VtuberDatabase::Stub::experimental_async::GetAllGroups(::grpc::ClientContext* context, const ::vNerve::vdb::GetVtbsRequest* request, ::vNerve::vdb::GroupCollection* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetAllGroups_, context, request, response, reactor);
}

void VtuberDatabase::Stub::experimental_async::GetAllGroups(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::vNerve::vdb::GroupCollection* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetAllGroups_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::vNerve::vdb::GroupCollection>* VtuberDatabase::Stub::AsyncGetAllGroupsRaw(::grpc::ClientContext* context, const ::vNerve::vdb::GetVtbsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::vNerve::vdb::GroupCollection>::Create(channel_.get(), cq, rpcmethod_GetAllGroups_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::vNerve::vdb::GroupCollection>* VtuberDatabase::Stub::PrepareAsyncGetAllGroupsRaw(::grpc::ClientContext* context, const ::vNerve::vdb::GetVtbsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::vNerve::vdb::GroupCollection>::Create(channel_.get(), cq, rpcmethod_GetAllGroups_, context, request, false);
}

::grpc::Status VtuberDatabase::Stub::GetAllFans(::grpc::ClientContext* context, const ::vNerve::vdb::GetVtbsRequest& request, ::vNerve::vdb::FanCollection* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetAllFans_, context, request, response);
}

void VtuberDatabase::Stub::experimental_async::GetAllFans(::grpc::ClientContext* context, const ::vNerve::vdb::GetVtbsRequest* request, ::vNerve::vdb::FanCollection* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetAllFans_, context, request, response, std::move(f));
}

void VtuberDatabase::Stub::experimental_async::GetAllFans(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::vNerve::vdb::FanCollection* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetAllFans_, context, request, response, std::move(f));
}

void VtuberDatabase::Stub::experimental_async::GetAllFans(::grpc::ClientContext* context, const ::vNerve::vdb::GetVtbsRequest* request, ::vNerve::vdb::FanCollection* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetAllFans_, context, request, response, reactor);
}

void VtuberDatabase::Stub::experimental_async::GetAllFans(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::vNerve::vdb::FanCollection* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetAllFans_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::vNerve::vdb::FanCollection>* VtuberDatabase::Stub::AsyncGetAllFansRaw(::grpc::ClientContext* context, const ::vNerve::vdb::GetVtbsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::vNerve::vdb::FanCollection>::Create(channel_.get(), cq, rpcmethod_GetAllFans_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::vNerve::vdb::FanCollection>* VtuberDatabase::Stub::PrepareAsyncGetAllFansRaw(::grpc::ClientContext* context, const ::vNerve::vdb::GetVtbsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::vNerve::vdb::FanCollection>::Create(channel_.get(), cq, rpcmethod_GetAllFans_, context, request, false);
}

::grpc::Status VtuberDatabase::Stub::GetLinkSyntaxs(::grpc::ClientContext* context, const ::vNerve::vdb::GetLinkSyntaxsRequest& request, ::vNerve::vdb::LinkSyntaxCollection* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetLinkSyntaxs_, context, request, response);
}

void VtuberDatabase::Stub::experimental_async::GetLinkSyntaxs(::grpc::ClientContext* context, const ::vNerve::vdb::GetLinkSyntaxsRequest* request, ::vNerve::vdb::LinkSyntaxCollection* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetLinkSyntaxs_, context, request, response, std::move(f));
}

void VtuberDatabase::Stub::experimental_async::GetLinkSyntaxs(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::vNerve::vdb::LinkSyntaxCollection* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetLinkSyntaxs_, context, request, response, std::move(f));
}

void VtuberDatabase::Stub::experimental_async::GetLinkSyntaxs(::grpc::ClientContext* context, const ::vNerve::vdb::GetLinkSyntaxsRequest* request, ::vNerve::vdb::LinkSyntaxCollection* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetLinkSyntaxs_, context, request, response, reactor);
}

void VtuberDatabase::Stub::experimental_async::GetLinkSyntaxs(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::vNerve::vdb::LinkSyntaxCollection* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetLinkSyntaxs_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::vNerve::vdb::LinkSyntaxCollection>* VtuberDatabase::Stub::AsyncGetLinkSyntaxsRaw(::grpc::ClientContext* context, const ::vNerve::vdb::GetLinkSyntaxsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::vNerve::vdb::LinkSyntaxCollection>::Create(channel_.get(), cq, rpcmethod_GetLinkSyntaxs_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::vNerve::vdb::LinkSyntaxCollection>* VtuberDatabase::Stub::PrepareAsyncGetLinkSyntaxsRaw(::grpc::ClientContext* context, const ::vNerve::vdb::GetLinkSyntaxsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::vNerve::vdb::LinkSyntaxCollection>::Create(channel_.get(), cq, rpcmethod_GetLinkSyntaxs_, context, request, false);
}

VtuberDatabase::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      VtuberDatabase_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< VtuberDatabase::Service, ::vNerve::vdb::GetVtbsRequest, ::vNerve::vdb::VtuberCollection>(
          std::mem_fn(&VtuberDatabase::Service::GetAllVtubers), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      VtuberDatabase_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< VtuberDatabase::Service, ::vNerve::vdb::GetVtbsRequest, ::vNerve::vdb::GroupCollection>(
          std::mem_fn(&VtuberDatabase::Service::GetAllGroups), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      VtuberDatabase_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< VtuberDatabase::Service, ::vNerve::vdb::GetVtbsRequest, ::vNerve::vdb::FanCollection>(
          std::mem_fn(&VtuberDatabase::Service::GetAllFans), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      VtuberDatabase_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< VtuberDatabase::Service, ::vNerve::vdb::GetLinkSyntaxsRequest, ::vNerve::vdb::LinkSyntaxCollection>(
          std::mem_fn(&VtuberDatabase::Service::GetLinkSyntaxs), this)));
}

VtuberDatabase::Service::~Service() {
}

::grpc::Status VtuberDatabase::Service::GetAllVtubers(::grpc::ServerContext* context, const ::vNerve::vdb::GetVtbsRequest* request, ::vNerve::vdb::VtuberCollection* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status VtuberDatabase::Service::GetAllGroups(::grpc::ServerContext* context, const ::vNerve::vdb::GetVtbsRequest* request, ::vNerve::vdb::GroupCollection* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status VtuberDatabase::Service::GetAllFans(::grpc::ServerContext* context, const ::vNerve::vdb::GetVtbsRequest* request, ::vNerve::vdb::FanCollection* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status VtuberDatabase::Service::GetLinkSyntaxs(::grpc::ServerContext* context, const ::vNerve::vdb::GetLinkSyntaxsRequest* request, ::vNerve::vdb::LinkSyntaxCollection* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace vNerve
}  // namespace vdb

