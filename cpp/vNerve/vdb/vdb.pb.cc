// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vNerve/vdb/vdb.proto

#include "vNerve/vdb/vdb.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_vNerve_2fvdb_2fvdb_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Account_vNerve_2fvdb_2fvdb_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vNerve_2fvdb_2fvdb_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Account_NameTranslationEntry_DoNotUse_vNerve_2fvdb_2fvdb_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vNerve_2fvdb_2fvdb_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Vtuber_vNerve_2fvdb_2fvdb_2eproto;
namespace vNerve {
namespace vdb {
class GetVtbsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetVtbsRequest> _instance;
} _GetVtbsRequest_default_instance_;
class VtuberCollectionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VtuberCollection> _instance;
} _VtuberCollection_default_instance_;
class VtuberDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Vtuber> _instance;
} _Vtuber_default_instance_;
class Account_NameTranslationEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Account_NameTranslationEntry_DoNotUse> _instance;
} _Account_NameTranslationEntry_DoNotUse_default_instance_;
class AccountDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Account> _instance;
} _Account_default_instance_;
}  // namespace vdb
}  // namespace vNerve
static void InitDefaultsscc_info_Account_vNerve_2fvdb_2fvdb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vNerve::vdb::_Account_default_instance_;
    new (ptr) ::vNerve::vdb::Account();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vNerve::vdb::Account::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Account_vNerve_2fvdb_2fvdb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Account_vNerve_2fvdb_2fvdb_2eproto}, {
      &scc_info_Account_NameTranslationEntry_DoNotUse_vNerve_2fvdb_2fvdb_2eproto.base,}};

static void InitDefaultsscc_info_Account_NameTranslationEntry_DoNotUse_vNerve_2fvdb_2fvdb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vNerve::vdb::_Account_NameTranslationEntry_DoNotUse_default_instance_;
    new (ptr) ::vNerve::vdb::Account_NameTranslationEntry_DoNotUse();
  }
  ::vNerve::vdb::Account_NameTranslationEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Account_NameTranslationEntry_DoNotUse_vNerve_2fvdb_2fvdb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Account_NameTranslationEntry_DoNotUse_vNerve_2fvdb_2fvdb_2eproto}, {}};

static void InitDefaultsscc_info_GetVtbsRequest_vNerve_2fvdb_2fvdb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vNerve::vdb::_GetVtbsRequest_default_instance_;
    new (ptr) ::vNerve::vdb::GetVtbsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vNerve::vdb::GetVtbsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetVtbsRequest_vNerve_2fvdb_2fvdb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetVtbsRequest_vNerve_2fvdb_2fvdb_2eproto}, {}};

static void InitDefaultsscc_info_Vtuber_vNerve_2fvdb_2fvdb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vNerve::vdb::_Vtuber_default_instance_;
    new (ptr) ::vNerve::vdb::Vtuber();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vNerve::vdb::Vtuber::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Vtuber_vNerve_2fvdb_2fvdb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Vtuber_vNerve_2fvdb_2fvdb_2eproto}, {
      &scc_info_Account_vNerve_2fvdb_2fvdb_2eproto.base,}};

static void InitDefaultsscc_info_VtuberCollection_vNerve_2fvdb_2fvdb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vNerve::vdb::_VtuberCollection_default_instance_;
    new (ptr) ::vNerve::vdb::VtuberCollection();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vNerve::vdb::VtuberCollection::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_VtuberCollection_vNerve_2fvdb_2fvdb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_VtuberCollection_vNerve_2fvdb_2fvdb_2eproto}, {
      &scc_info_Vtuber_vNerve_2fvdb_2fvdb_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_vNerve_2fvdb_2fvdb_2eproto[5];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_vNerve_2fvdb_2fvdb_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_vNerve_2fvdb_2fvdb_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_vNerve_2fvdb_2fvdb_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vNerve::vdb::GetVtbsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vNerve::vdb::VtuberCollection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vNerve::vdb::VtuberCollection, vtubers_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vNerve::vdb::Vtuber, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vNerve::vdb::Vtuber, uuid_),
  PROTOBUF_FIELD_OFFSET(::vNerve::vdb::Vtuber, type_),
  PROTOBUF_FIELD_OFFSET(::vNerve::vdb::Vtuber, bot_),
  PROTOBUF_FIELD_OFFSET(::vNerve::vdb::Vtuber, accounts_),
  PROTOBUF_FIELD_OFFSET(::vNerve::vdb::Vtuber, group_uuid_),
  PROTOBUF_FIELD_OFFSET(::vNerve::vdb::Vtuber, model_2d_),
  PROTOBUF_FIELD_OFFSET(::vNerve::vdb::Vtuber, model_3d_),
  PROTOBUF_FIELD_OFFSET(::vNerve::vdb::Vtuber, model_2d_artist_uuid_),
  PROTOBUF_FIELD_OFFSET(::vNerve::vdb::Vtuber, model_3d_artist_uuid_),
  PROTOBUF_FIELD_OFFSET(::vNerve::vdb::Account_NameTranslationEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::vNerve::vdb::Account_NameTranslationEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vNerve::vdb::Account_NameTranslationEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::vNerve::vdb::Account_NameTranslationEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vNerve::vdb::Account, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vNerve::vdb::Account, id_),
  PROTOBUF_FIELD_OFFSET(::vNerve::vdb::Account, account_type_),
  PROTOBUF_FIELD_OFFSET(::vNerve::vdb::Account, account_platform_),
  PROTOBUF_FIELD_OFFSET(::vNerve::vdb::Account, extra_),
  PROTOBUF_FIELD_OFFSET(::vNerve::vdb::Account, name_),
  PROTOBUF_FIELD_OFFSET(::vNerve::vdb::Account, name_translation_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::vNerve::vdb::GetVtbsRequest)},
  { 5, -1, sizeof(::vNerve::vdb::VtuberCollection)},
  { 11, -1, sizeof(::vNerve::vdb::Vtuber)},
  { 25, 32, sizeof(::vNerve::vdb::Account_NameTranslationEntry_DoNotUse)},
  { 34, -1, sizeof(::vNerve::vdb::Account)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vNerve::vdb::_GetVtbsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vNerve::vdb::_VtuberCollection_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vNerve::vdb::_Vtuber_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vNerve::vdb::_Account_NameTranslationEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vNerve::vdb::_Account_default_instance_),
};

const char descriptor_table_protodef_vNerve_2fvdb_2fvdb_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\024vNerve/vdb/vdb.proto\022\nvNerve.vdb\"\020\n\016Ge"
  "tVtbsRequest\"7\n\020VtuberCollection\022#\n\007vtub"
  "ers\030\001 \003(\0132\022.vNerve.vdb.Vtuber\"\344\001\n\006Vtuber"
  "\022\014\n\004uuid\030\001 \001(\t\022$\n\004type\030\002 \001(\0162\026.vNerve.vd"
  "b.VtuberType\022\013\n\003bot\030\003 \001(\010\022%\n\010accounts\030\004 "
  "\003(\0132\023.vNerve.vdb.Account\022\022\n\ngroup_uuid\030\005"
  " \001(\t\022\020\n\010model_2d\030\006 \001(\010\022\020\n\010model_3d\030\007 \001(\010"
  "\022\034\n\024model_2d_artist_uuid\030\010 \001(\t\022\034\n\024model_"
  "3d_artist_uuid\030\t \001(\t\"\224\002\n\007Account\022\n\n\002id\030\001"
  " \001(\t\022-\n\014account_type\030\002 \001(\0162\027.vNerve.vdb."
  "AccountType\0225\n\020account_platform\030\003 \001(\0162\033."
  "vNerve.vdb.AccountPlatform\022\r\n\005extra\030\004 \003("
  "\t\022\014\n\004name\030\005 \001(\t\022B\n\020name_translation\030\006 \003("
  "\0132(.vNerve.vdb.Account.NameTranslationEn"
  "try\0326\n\024NameTranslationEntry\022\013\n\003key\030\001 \001(\t"
  "\022\r\n\005value\030\002 \001(\t:\0028\001*E\n\nVtuberType\022\027\n\023UNK"
  "NOWN_VTUBER_TYPE\020\000\022\n\n\006VTUBER\020\001\022\t\n\005GROUP\020"
  "\002\022\007\n\003FAN\020\003*@\n\013AccountType\022\030\n\024UNKNOWN_ACC"
  "OUNT_TYPE\020\000\022\014\n\010OFFICIAL\020\001\022\t\n\005RELAY\020\002*\220\003\n"
  "\017AccountPlatform\022\024\n\020UNKNOWN_PLATFORM\020\000\022\014"
  "\n\010BILIBILI\020\001\022\013\n\007TWITTER\020\002\022\013\n\007YOUTUBE\020\003\022\r"
  "\n\tUSERLOCAL\020\004\022\t\n\005PEING\020\005\022\017\n\013MARSHMALLOW\020"
  "\006\022\t\n\005PIXIV\020\007\022\t\n\005WEIBO\020\010\022\t\n\005BOOTH\020\t\022\n\n\006AF"
  "DIAN\020\n\022\007\n\003WEB\020\013\022\t\n\005EMAIL\020\014\022\r\n\tINSTAGRAM\020"
  "\r\022\013\n\007POPIASK\020\016\022\020\n\014AMAZON_CO_JP\020\017\022\n\n\006TWIT"
  "CH\020\020\022\014\n\010NICONICO\020\021\022\014\n\010FACEBOOK\020\022\022\r\n\tTEES"
  "PRING\020\023\022\013\n\007PATREON\020\024\022\014\n\010JVCMUSIC\020\025\022\t\n\005CI"
  "_EN\020\026\022\n\n\006GITHUB\020\027\022\010\n\004LINE\020\030\022\n\n\006TIKTOK\020\031\022"
  "\n\n\006FANTIA\020\032\022\014\n\010SHOWROOM\020\033\022\014\n\010TELEGRAM\020\0342"
  "\363\001\n\016VtuberDatabase\022K\n\rGetAllVtubers\022\032.vN"
  "erve.vdb.GetVtbsRequest\032\034.vNerve.vdb.Vtu"
  "berCollection\"\000\022J\n\014GetAllGroups\022\032.vNerve"
  ".vdb.GetVtbsRequest\032\034.vNerve.vdb.VtuberC"
  "ollection\"\000\022H\n\nGetAllFans\022\032.vNerve.vdb.G"
  "etVtbsRequest\032\034.vNerve.vdb.VtuberCollect"
  "ion\"\000b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_vNerve_2fvdb_2fvdb_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_vNerve_2fvdb_2fvdb_2eproto_sccs[5] = {
  &scc_info_Account_vNerve_2fvdb_2fvdb_2eproto.base,
  &scc_info_Account_NameTranslationEntry_DoNotUse_vNerve_2fvdb_2fvdb_2eproto.base,
  &scc_info_GetVtbsRequest_vNerve_2fvdb_2fvdb_2eproto.base,
  &scc_info_Vtuber_vNerve_2fvdb_2fvdb_2eproto.base,
  &scc_info_VtuberCollection_vNerve_2fvdb_2fvdb_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_vNerve_2fvdb_2fvdb_2eproto_once;
static bool descriptor_table_vNerve_2fvdb_2fvdb_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_vNerve_2fvdb_2fvdb_2eproto = {
  &descriptor_table_vNerve_2fvdb_2fvdb_2eproto_initialized, descriptor_table_protodef_vNerve_2fvdb_2fvdb_2eproto, "vNerve/vdb/vdb.proto", 1413,
  &descriptor_table_vNerve_2fvdb_2fvdb_2eproto_once, descriptor_table_vNerve_2fvdb_2fvdb_2eproto_sccs, descriptor_table_vNerve_2fvdb_2fvdb_2eproto_deps, 5, 0,
  schemas, file_default_instances, TableStruct_vNerve_2fvdb_2fvdb_2eproto::offsets,
  file_level_metadata_vNerve_2fvdb_2fvdb_2eproto, 5, file_level_enum_descriptors_vNerve_2fvdb_2fvdb_2eproto, file_level_service_descriptors_vNerve_2fvdb_2fvdb_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_vNerve_2fvdb_2fvdb_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_vNerve_2fvdb_2fvdb_2eproto), true);
namespace vNerve {
namespace vdb {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* VtuberType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_vNerve_2fvdb_2fvdb_2eproto);
  return file_level_enum_descriptors_vNerve_2fvdb_2fvdb_2eproto[0];
}
bool VtuberType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AccountType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_vNerve_2fvdb_2fvdb_2eproto);
  return file_level_enum_descriptors_vNerve_2fvdb_2fvdb_2eproto[1];
}
bool AccountType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AccountPlatform_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_vNerve_2fvdb_2fvdb_2eproto);
  return file_level_enum_descriptors_vNerve_2fvdb_2fvdb_2eproto[2];
}
bool AccountPlatform_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void GetVtbsRequest::InitAsDefaultInstance() {
}
class GetVtbsRequest::_Internal {
 public:
};

GetVtbsRequest::GetVtbsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vNerve.vdb.GetVtbsRequest)
}
GetVtbsRequest::GetVtbsRequest(const GetVtbsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:vNerve.vdb.GetVtbsRequest)
}

void GetVtbsRequest::SharedCtor() {
}

GetVtbsRequest::~GetVtbsRequest() {
  // @@protoc_insertion_point(destructor:vNerve.vdb.GetVtbsRequest)
  SharedDtor();
}

void GetVtbsRequest::SharedDtor() {
}

void GetVtbsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetVtbsRequest& GetVtbsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetVtbsRequest_vNerve_2fvdb_2fvdb_2eproto.base);
  return *internal_default_instance();
}


void GetVtbsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:vNerve.vdb.GetVtbsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* GetVtbsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetVtbsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vNerve.vdb.GetVtbsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vNerve.vdb.GetVtbsRequest)
  return target;
}

size_t GetVtbsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vNerve.vdb.GetVtbsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetVtbsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vNerve.vdb.GetVtbsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetVtbsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetVtbsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vNerve.vdb.GetVtbsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vNerve.vdb.GetVtbsRequest)
    MergeFrom(*source);
  }
}

void GetVtbsRequest::MergeFrom(const GetVtbsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vNerve.vdb.GetVtbsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GetVtbsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vNerve.vdb.GetVtbsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetVtbsRequest::CopyFrom(const GetVtbsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vNerve.vdb.GetVtbsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetVtbsRequest::IsInitialized() const {
  return true;
}

void GetVtbsRequest::InternalSwap(GetVtbsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetVtbsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void VtuberCollection::InitAsDefaultInstance() {
}
class VtuberCollection::_Internal {
 public:
};

VtuberCollection::VtuberCollection()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vNerve.vdb.VtuberCollection)
}
VtuberCollection::VtuberCollection(const VtuberCollection& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      vtubers_(from.vtubers_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:vNerve.vdb.VtuberCollection)
}

void VtuberCollection::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VtuberCollection_vNerve_2fvdb_2fvdb_2eproto.base);
}

VtuberCollection::~VtuberCollection() {
  // @@protoc_insertion_point(destructor:vNerve.vdb.VtuberCollection)
  SharedDtor();
}

void VtuberCollection::SharedDtor() {
}

void VtuberCollection::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VtuberCollection& VtuberCollection::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VtuberCollection_vNerve_2fvdb_2fvdb_2eproto.base);
  return *internal_default_instance();
}


void VtuberCollection::Clear() {
// @@protoc_insertion_point(message_clear_start:vNerve.vdb.VtuberCollection)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vtubers_.Clear();
  _internal_metadata_.Clear();
}

const char* VtuberCollection::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .vNerve.vdb.Vtuber vtubers = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_vtubers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VtuberCollection::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vNerve.vdb.VtuberCollection)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .vNerve.vdb.Vtuber vtubers = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_vtubers_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_vtubers(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vNerve.vdb.VtuberCollection)
  return target;
}

size_t VtuberCollection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vNerve.vdb.VtuberCollection)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vNerve.vdb.Vtuber vtubers = 1;
  total_size += 1UL * this->_internal_vtubers_size();
  for (const auto& msg : this->vtubers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VtuberCollection::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vNerve.vdb.VtuberCollection)
  GOOGLE_DCHECK_NE(&from, this);
  const VtuberCollection* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VtuberCollection>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vNerve.vdb.VtuberCollection)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vNerve.vdb.VtuberCollection)
    MergeFrom(*source);
  }
}

void VtuberCollection::MergeFrom(const VtuberCollection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vNerve.vdb.VtuberCollection)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  vtubers_.MergeFrom(from.vtubers_);
}

void VtuberCollection::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vNerve.vdb.VtuberCollection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VtuberCollection::CopyFrom(const VtuberCollection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vNerve.vdb.VtuberCollection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VtuberCollection::IsInitialized() const {
  return true;
}

void VtuberCollection::InternalSwap(VtuberCollection* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  vtubers_.InternalSwap(&other->vtubers_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VtuberCollection::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Vtuber::InitAsDefaultInstance() {
}
class Vtuber::_Internal {
 public:
};

Vtuber::Vtuber()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vNerve.vdb.Vtuber)
}
Vtuber::Vtuber(const Vtuber& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      accounts_(from.accounts_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  uuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_uuid().empty()) {
    uuid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.uuid_);
  }
  group_uuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_group_uuid().empty()) {
    group_uuid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.group_uuid_);
  }
  model_2d_artist_uuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_model_2d_artist_uuid().empty()) {
    model_2d_artist_uuid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.model_2d_artist_uuid_);
  }
  model_3d_artist_uuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_model_3d_artist_uuid().empty()) {
    model_3d_artist_uuid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.model_3d_artist_uuid_);
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&model_3d_) -
    reinterpret_cast<char*>(&type_)) + sizeof(model_3d_));
  // @@protoc_insertion_point(copy_constructor:vNerve.vdb.Vtuber)
}

void Vtuber::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Vtuber_vNerve_2fvdb_2fvdb_2eproto.base);
  uuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  group_uuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  model_2d_artist_uuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  model_3d_artist_uuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&model_3d_) -
      reinterpret_cast<char*>(&type_)) + sizeof(model_3d_));
}

Vtuber::~Vtuber() {
  // @@protoc_insertion_point(destructor:vNerve.vdb.Vtuber)
  SharedDtor();
}

void Vtuber::SharedDtor() {
  uuid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  group_uuid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  model_2d_artist_uuid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  model_3d_artist_uuid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Vtuber::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Vtuber& Vtuber::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Vtuber_vNerve_2fvdb_2fvdb_2eproto.base);
  return *internal_default_instance();
}


void Vtuber::Clear() {
// @@protoc_insertion_point(message_clear_start:vNerve.vdb.Vtuber)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  accounts_.Clear();
  uuid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  group_uuid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  model_2d_artist_uuid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  model_3d_artist_uuid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&model_3d_) -
      reinterpret_cast<char*>(&type_)) + sizeof(model_3d_));
  _internal_metadata_.Clear();
}

const char* Vtuber::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string uuid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_uuid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vNerve.vdb.Vtuber.uuid"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vNerve.vdb.VtuberType type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::vNerve::vdb::VtuberType>(val));
        } else goto handle_unusual;
        continue;
      // bool bot = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          bot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .vNerve.vdb.Account accounts = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_accounts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // string group_uuid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_group_uuid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vNerve.vdb.Vtuber.group_uuid"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool model_2d = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          model_2d_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool model_3d = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          model_3d_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string model_2d_artist_uuid = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_model_2d_artist_uuid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vNerve.vdb.Vtuber.model_2d_artist_uuid"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string model_3d_artist_uuid = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_model_3d_artist_uuid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vNerve.vdb.Vtuber.model_3d_artist_uuid"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Vtuber::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vNerve.vdb.Vtuber)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string uuid = 1;
  if (this->uuid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_uuid().data(), static_cast<int>(this->_internal_uuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vNerve.vdb.Vtuber.uuid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_uuid(), target);
  }

  // .vNerve.vdb.VtuberType type = 2;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  // bool bot = 3;
  if (this->bot() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_bot(), target);
  }

  // repeated .vNerve.vdb.Account accounts = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_accounts_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_accounts(i), target, stream);
  }

  // string group_uuid = 5;
  if (this->group_uuid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_group_uuid().data(), static_cast<int>(this->_internal_group_uuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vNerve.vdb.Vtuber.group_uuid");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_group_uuid(), target);
  }

  // bool model_2d = 6;
  if (this->model_2d() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_model_2d(), target);
  }

  // bool model_3d = 7;
  if (this->model_3d() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_model_3d(), target);
  }

  // string model_2d_artist_uuid = 8;
  if (this->model_2d_artist_uuid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_model_2d_artist_uuid().data(), static_cast<int>(this->_internal_model_2d_artist_uuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vNerve.vdb.Vtuber.model_2d_artist_uuid");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_model_2d_artist_uuid(), target);
  }

  // string model_3d_artist_uuid = 9;
  if (this->model_3d_artist_uuid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_model_3d_artist_uuid().data(), static_cast<int>(this->_internal_model_3d_artist_uuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vNerve.vdb.Vtuber.model_3d_artist_uuid");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_model_3d_artist_uuid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vNerve.vdb.Vtuber)
  return target;
}

size_t Vtuber::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vNerve.vdb.Vtuber)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vNerve.vdb.Account accounts = 4;
  total_size += 1UL * this->_internal_accounts_size();
  for (const auto& msg : this->accounts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string uuid = 1;
  if (this->uuid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_uuid());
  }

  // string group_uuid = 5;
  if (this->group_uuid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_group_uuid());
  }

  // string model_2d_artist_uuid = 8;
  if (this->model_2d_artist_uuid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model_2d_artist_uuid());
  }

  // string model_3d_artist_uuid = 9;
  if (this->model_3d_artist_uuid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model_3d_artist_uuid());
  }

  // .vNerve.vdb.VtuberType type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  // bool bot = 3;
  if (this->bot() != 0) {
    total_size += 1 + 1;
  }

  // bool model_2d = 6;
  if (this->model_2d() != 0) {
    total_size += 1 + 1;
  }

  // bool model_3d = 7;
  if (this->model_3d() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Vtuber::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vNerve.vdb.Vtuber)
  GOOGLE_DCHECK_NE(&from, this);
  const Vtuber* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Vtuber>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vNerve.vdb.Vtuber)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vNerve.vdb.Vtuber)
    MergeFrom(*source);
  }
}

void Vtuber::MergeFrom(const Vtuber& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vNerve.vdb.Vtuber)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  accounts_.MergeFrom(from.accounts_);
  if (from.uuid().size() > 0) {

    uuid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.uuid_);
  }
  if (from.group_uuid().size() > 0) {

    group_uuid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.group_uuid_);
  }
  if (from.model_2d_artist_uuid().size() > 0) {

    model_2d_artist_uuid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.model_2d_artist_uuid_);
  }
  if (from.model_3d_artist_uuid().size() > 0) {

    model_3d_artist_uuid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.model_3d_artist_uuid_);
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.bot() != 0) {
    _internal_set_bot(from._internal_bot());
  }
  if (from.model_2d() != 0) {
    _internal_set_model_2d(from._internal_model_2d());
  }
  if (from.model_3d() != 0) {
    _internal_set_model_3d(from._internal_model_3d());
  }
}

void Vtuber::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vNerve.vdb.Vtuber)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vtuber::CopyFrom(const Vtuber& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vNerve.vdb.Vtuber)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vtuber::IsInitialized() const {
  return true;
}

void Vtuber::InternalSwap(Vtuber* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  accounts_.InternalSwap(&other->accounts_);
  uuid_.Swap(&other->uuid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  group_uuid_.Swap(&other->group_uuid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  model_2d_artist_uuid_.Swap(&other->model_2d_artist_uuid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  model_3d_artist_uuid_.Swap(&other->model_3d_artist_uuid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(type_, other->type_);
  swap(bot_, other->bot_);
  swap(model_2d_, other->model_2d_);
  swap(model_3d_, other->model_3d_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Vtuber::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

Account_NameTranslationEntry_DoNotUse::Account_NameTranslationEntry_DoNotUse() {}
Account_NameTranslationEntry_DoNotUse::Account_NameTranslationEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Account_NameTranslationEntry_DoNotUse::MergeFrom(const Account_NameTranslationEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Account_NameTranslationEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void Account_NameTranslationEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void Account::InitAsDefaultInstance() {
}
class Account::_Internal {
 public:
};

Account::Account()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vNerve.vdb.Account)
}
Account::Account(const Account& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      extra_(from.extra_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_translation_.MergeFrom(from.name_translation_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&account_type_, &from.account_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&account_platform_) -
    reinterpret_cast<char*>(&account_type_)) + sizeof(account_platform_));
  // @@protoc_insertion_point(copy_constructor:vNerve.vdb.Account)
}

void Account::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Account_vNerve_2fvdb_2fvdb_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&account_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&account_platform_) -
      reinterpret_cast<char*>(&account_type_)) + sizeof(account_platform_));
}

Account::~Account() {
  // @@protoc_insertion_point(destructor:vNerve.vdb.Account)
  SharedDtor();
}

void Account::SharedDtor() {
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Account::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Account& Account::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Account_vNerve_2fvdb_2fvdb_2eproto.base);
  return *internal_default_instance();
}


void Account::Clear() {
// @@protoc_insertion_point(message_clear_start:vNerve.vdb.Account)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  extra_.Clear();
  name_translation_.Clear();
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&account_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&account_platform_) -
      reinterpret_cast<char*>(&account_type_)) + sizeof(account_platform_));
  _internal_metadata_.Clear();
}

const char* Account::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vNerve.vdb.Account.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vNerve.vdb.AccountType account_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_account_type(static_cast<::vNerve::vdb::AccountType>(val));
        } else goto handle_unusual;
        continue;
      // .vNerve.vdb.AccountPlatform account_platform = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_account_platform(static_cast<::vNerve::vdb::AccountPlatform>(val));
        } else goto handle_unusual;
        continue;
      // repeated string extra = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_extra();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vNerve.vdb.Account.extra"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // string name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vNerve.vdb.Account.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, string> name_translation = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&name_translation_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Account::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vNerve.vdb.Account)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vNerve.vdb.Account.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // .vNerve.vdb.AccountType account_type = 2;
  if (this->account_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_account_type(), target);
  }

  // .vNerve.vdb.AccountPlatform account_platform = 3;
  if (this->account_platform() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_account_platform(), target);
  }

  // repeated string extra = 4;
  for (int i = 0, n = this->_internal_extra_size(); i < n; i++) {
    const auto& s = this->_internal_extra(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vNerve.vdb.Account.extra");
    target = stream->WriteString(4, s, target);
  }

  // string name = 5;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vNerve.vdb.Account.name");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_name(), target);
  }

  // map<string, string> name_translation = 6;
  if (!this->_internal_name_translation().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "vNerve.vdb.Account.NameTranslationEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "vNerve.vdb.Account.NameTranslationEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_name_translation().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_name_translation().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_name_translation().begin();
          it != this->_internal_name_translation().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = Account_NameTranslationEntry_DoNotUse::Funcs::InternalSerialize(6, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_name_translation().begin();
          it != this->_internal_name_translation().end(); ++it) {
        target = Account_NameTranslationEntry_DoNotUse::Funcs::InternalSerialize(6, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vNerve.vdb.Account)
  return target;
}

size_t Account::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vNerve.vdb.Account)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string extra = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(extra_.size());
  for (int i = 0, n = extra_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      extra_.Get(i));
  }

  // map<string, string> name_translation = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_name_translation_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_name_translation().begin();
      it != this->_internal_name_translation().end(); ++it) {
    total_size += Account_NameTranslationEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string name = 5;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .vNerve.vdb.AccountType account_type = 2;
  if (this->account_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_account_type());
  }

  // .vNerve.vdb.AccountPlatform account_platform = 3;
  if (this->account_platform() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_account_platform());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Account::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vNerve.vdb.Account)
  GOOGLE_DCHECK_NE(&from, this);
  const Account* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Account>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vNerve.vdb.Account)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vNerve.vdb.Account)
    MergeFrom(*source);
  }
}

void Account::MergeFrom(const Account& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vNerve.vdb.Account)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  extra_.MergeFrom(from.extra_);
  name_translation_.MergeFrom(from.name_translation_);
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.account_type() != 0) {
    _internal_set_account_type(from._internal_account_type());
  }
  if (from.account_platform() != 0) {
    _internal_set_account_platform(from._internal_account_platform());
  }
}

void Account::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vNerve.vdb.Account)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Account::CopyFrom(const Account& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vNerve.vdb.Account)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Account::IsInitialized() const {
  return true;
}

void Account::InternalSwap(Account* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  extra_.InternalSwap(&other->extra_);
  name_translation_.Swap(&other->name_translation_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(account_type_, other->account_type_);
  swap(account_platform_, other->account_platform_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Account::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace vdb
}  // namespace vNerve
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::vNerve::vdb::GetVtbsRequest* Arena::CreateMaybeMessage< ::vNerve::vdb::GetVtbsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::vNerve::vdb::GetVtbsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::vNerve::vdb::VtuberCollection* Arena::CreateMaybeMessage< ::vNerve::vdb::VtuberCollection >(Arena* arena) {
  return Arena::CreateInternal< ::vNerve::vdb::VtuberCollection >(arena);
}
template<> PROTOBUF_NOINLINE ::vNerve::vdb::Vtuber* Arena::CreateMaybeMessage< ::vNerve::vdb::Vtuber >(Arena* arena) {
  return Arena::CreateInternal< ::vNerve::vdb::Vtuber >(arena);
}
template<> PROTOBUF_NOINLINE ::vNerve::vdb::Account_NameTranslationEntry_DoNotUse* Arena::CreateMaybeMessage< ::vNerve::vdb::Account_NameTranslationEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::vNerve::vdb::Account_NameTranslationEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::vNerve::vdb::Account* Arena::CreateMaybeMessage< ::vNerve::vdb::Account >(Arena* arena) {
  return Arena::CreateInternal< ::vNerve::vdb::Account >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
