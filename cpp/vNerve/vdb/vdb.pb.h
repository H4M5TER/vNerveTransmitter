// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vNerve/vdb/vdb.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_vNerve_2fvdb_2fvdb_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_vNerve_2fvdb_2fvdb_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_vNerve_2fvdb_2fvdb_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_vNerve_2fvdb_2fvdb_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_vNerve_2fvdb_2fvdb_2eproto;
namespace vNerve {
namespace vdb {
class Account;
class AccountDefaultTypeInternal;
extern AccountDefaultTypeInternal _Account_default_instance_;
class Account_NameTranslationEntry_DoNotUse;
class Account_NameTranslationEntry_DoNotUseDefaultTypeInternal;
extern Account_NameTranslationEntry_DoNotUseDefaultTypeInternal _Account_NameTranslationEntry_DoNotUse_default_instance_;
class GetVtbsRequest;
class GetVtbsRequestDefaultTypeInternal;
extern GetVtbsRequestDefaultTypeInternal _GetVtbsRequest_default_instance_;
class Vtuber;
class VtuberDefaultTypeInternal;
extern VtuberDefaultTypeInternal _Vtuber_default_instance_;
class VtuberCollection;
class VtuberCollectionDefaultTypeInternal;
extern VtuberCollectionDefaultTypeInternal _VtuberCollection_default_instance_;
}  // namespace vdb
}  // namespace vNerve
PROTOBUF_NAMESPACE_OPEN
template<> ::vNerve::vdb::Account* Arena::CreateMaybeMessage<::vNerve::vdb::Account>(Arena*);
template<> ::vNerve::vdb::Account_NameTranslationEntry_DoNotUse* Arena::CreateMaybeMessage<::vNerve::vdb::Account_NameTranslationEntry_DoNotUse>(Arena*);
template<> ::vNerve::vdb::GetVtbsRequest* Arena::CreateMaybeMessage<::vNerve::vdb::GetVtbsRequest>(Arena*);
template<> ::vNerve::vdb::Vtuber* Arena::CreateMaybeMessage<::vNerve::vdb::Vtuber>(Arena*);
template<> ::vNerve::vdb::VtuberCollection* Arena::CreateMaybeMessage<::vNerve::vdb::VtuberCollection>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace vNerve {
namespace vdb {

enum VtuberType : int {
  UNKNOWN_VTUBER_TYPE = 0,
  VTUBER = 1,
  GROUP = 2,
  FAN = 3,
  VtuberType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  VtuberType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool VtuberType_IsValid(int value);
constexpr VtuberType VtuberType_MIN = UNKNOWN_VTUBER_TYPE;
constexpr VtuberType VtuberType_MAX = FAN;
constexpr int VtuberType_ARRAYSIZE = VtuberType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* VtuberType_descriptor();
template<typename T>
inline const std::string& VtuberType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, VtuberType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function VtuberType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    VtuberType_descriptor(), enum_t_value);
}
inline bool VtuberType_Parse(
    const std::string& name, VtuberType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<VtuberType>(
    VtuberType_descriptor(), name, value);
}
enum AccountType : int {
  UNKNOWN_ACCOUNT_TYPE = 0,
  OFFICIAL = 1,
  RELAY = 2,
  AccountType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  AccountType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool AccountType_IsValid(int value);
constexpr AccountType AccountType_MIN = UNKNOWN_ACCOUNT_TYPE;
constexpr AccountType AccountType_MAX = RELAY;
constexpr int AccountType_ARRAYSIZE = AccountType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AccountType_descriptor();
template<typename T>
inline const std::string& AccountType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AccountType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AccountType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    AccountType_descriptor(), enum_t_value);
}
inline bool AccountType_Parse(
    const std::string& name, AccountType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<AccountType>(
    AccountType_descriptor(), name, value);
}
enum AccountPlatform : int {
  UNKNOWN_PLATFORM = 0,
  BILIBILI = 1,
  TWITTER = 2,
  YOUTUBE = 3,
  USERLOCAL = 4,
  PEING = 5,
  MARSHMALLOW = 6,
  PIXIV = 7,
  WEIBO = 8,
  BOOTH = 9,
  AFDIAN = 10,
  WEB = 11,
  EMAIL = 12,
  INSTAGRAM = 13,
  POPIASK = 14,
  AMAZON_CO_JP = 15,
  TWITCH = 16,
  NICONICO = 17,
  FACEBOOK = 18,
  TEESPRING = 19,
  PATREON = 20,
  JVCMUSIC = 21,
  CI_EN = 22,
  GITHUB = 23,
  LINE = 24,
  TIKTOK = 25,
  FANTIA = 26,
  SHOWROOM = 27,
  TELEGRAM = 28,
  AccountPlatform_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  AccountPlatform_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool AccountPlatform_IsValid(int value);
constexpr AccountPlatform AccountPlatform_MIN = UNKNOWN_PLATFORM;
constexpr AccountPlatform AccountPlatform_MAX = TELEGRAM;
constexpr int AccountPlatform_ARRAYSIZE = AccountPlatform_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AccountPlatform_descriptor();
template<typename T>
inline const std::string& AccountPlatform_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AccountPlatform>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AccountPlatform_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    AccountPlatform_descriptor(), enum_t_value);
}
inline bool AccountPlatform_Parse(
    const std::string& name, AccountPlatform* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<AccountPlatform>(
    AccountPlatform_descriptor(), name, value);
}
// ===================================================================

class GetVtbsRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vNerve.vdb.GetVtbsRequest) */ {
 public:
  GetVtbsRequest();
  virtual ~GetVtbsRequest();

  GetVtbsRequest(const GetVtbsRequest& from);
  GetVtbsRequest(GetVtbsRequest&& from) noexcept
    : GetVtbsRequest() {
    *this = ::std::move(from);
  }

  inline GetVtbsRequest& operator=(const GetVtbsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetVtbsRequest& operator=(GetVtbsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetVtbsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetVtbsRequest* internal_default_instance() {
    return reinterpret_cast<const GetVtbsRequest*>(
               &_GetVtbsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GetVtbsRequest& a, GetVtbsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetVtbsRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetVtbsRequest* New() const final {
    return CreateMaybeMessage<GetVtbsRequest>(nullptr);
  }

  GetVtbsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetVtbsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetVtbsRequest& from);
  void MergeFrom(const GetVtbsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetVtbsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vNerve.vdb.GetVtbsRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vNerve_2fvdb_2fvdb_2eproto);
    return ::descriptor_table_vNerve_2fvdb_2fvdb_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:vNerve.vdb.GetVtbsRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vNerve_2fvdb_2fvdb_2eproto;
};
// -------------------------------------------------------------------

class VtuberCollection :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vNerve.vdb.VtuberCollection) */ {
 public:
  VtuberCollection();
  virtual ~VtuberCollection();

  VtuberCollection(const VtuberCollection& from);
  VtuberCollection(VtuberCollection&& from) noexcept
    : VtuberCollection() {
    *this = ::std::move(from);
  }

  inline VtuberCollection& operator=(const VtuberCollection& from) {
    CopyFrom(from);
    return *this;
  }
  inline VtuberCollection& operator=(VtuberCollection&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VtuberCollection& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VtuberCollection* internal_default_instance() {
    return reinterpret_cast<const VtuberCollection*>(
               &_VtuberCollection_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(VtuberCollection& a, VtuberCollection& b) {
    a.Swap(&b);
  }
  inline void Swap(VtuberCollection* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VtuberCollection* New() const final {
    return CreateMaybeMessage<VtuberCollection>(nullptr);
  }

  VtuberCollection* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VtuberCollection>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VtuberCollection& from);
  void MergeFrom(const VtuberCollection& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VtuberCollection* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vNerve.vdb.VtuberCollection";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vNerve_2fvdb_2fvdb_2eproto);
    return ::descriptor_table_vNerve_2fvdb_2fvdb_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVtubersFieldNumber = 1,
  };
  // repeated .vNerve.vdb.Vtuber vtubers = 1;
  int vtubers_size() const;
  private:
  int _internal_vtubers_size() const;
  public:
  void clear_vtubers();
  ::vNerve::vdb::Vtuber* mutable_vtubers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vNerve::vdb::Vtuber >*
      mutable_vtubers();
  private:
  const ::vNerve::vdb::Vtuber& _internal_vtubers(int index) const;
  ::vNerve::vdb::Vtuber* _internal_add_vtubers();
  public:
  const ::vNerve::vdb::Vtuber& vtubers(int index) const;
  ::vNerve::vdb::Vtuber* add_vtubers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vNerve::vdb::Vtuber >&
      vtubers() const;

  // @@protoc_insertion_point(class_scope:vNerve.vdb.VtuberCollection)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vNerve::vdb::Vtuber > vtubers_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vNerve_2fvdb_2fvdb_2eproto;
};
// -------------------------------------------------------------------

class Vtuber :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vNerve.vdb.Vtuber) */ {
 public:
  Vtuber();
  virtual ~Vtuber();

  Vtuber(const Vtuber& from);
  Vtuber(Vtuber&& from) noexcept
    : Vtuber() {
    *this = ::std::move(from);
  }

  inline Vtuber& operator=(const Vtuber& from) {
    CopyFrom(from);
    return *this;
  }
  inline Vtuber& operator=(Vtuber&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Vtuber& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Vtuber* internal_default_instance() {
    return reinterpret_cast<const Vtuber*>(
               &_Vtuber_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Vtuber& a, Vtuber& b) {
    a.Swap(&b);
  }
  inline void Swap(Vtuber* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Vtuber* New() const final {
    return CreateMaybeMessage<Vtuber>(nullptr);
  }

  Vtuber* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Vtuber>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Vtuber& from);
  void MergeFrom(const Vtuber& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vtuber* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vNerve.vdb.Vtuber";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vNerve_2fvdb_2fvdb_2eproto);
    return ::descriptor_table_vNerve_2fvdb_2fvdb_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountsFieldNumber = 4,
    kUuidFieldNumber = 1,
    kGroupUuidFieldNumber = 5,
    kModel2DArtistUuidFieldNumber = 8,
    kModel3DArtistUuidFieldNumber = 9,
    kTypeFieldNumber = 2,
    kBotFieldNumber = 3,
    kModel2DFieldNumber = 6,
    kModel3DFieldNumber = 7,
  };
  // repeated .vNerve.vdb.Account accounts = 4;
  int accounts_size() const;
  private:
  int _internal_accounts_size() const;
  public:
  void clear_accounts();
  ::vNerve::vdb::Account* mutable_accounts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vNerve::vdb::Account >*
      mutable_accounts();
  private:
  const ::vNerve::vdb::Account& _internal_accounts(int index) const;
  ::vNerve::vdb::Account* _internal_add_accounts();
  public:
  const ::vNerve::vdb::Account& accounts(int index) const;
  ::vNerve::vdb::Account* add_accounts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vNerve::vdb::Account >&
      accounts() const;

  // string uuid = 1;
  void clear_uuid();
  const std::string& uuid() const;
  void set_uuid(const std::string& value);
  void set_uuid(std::string&& value);
  void set_uuid(const char* value);
  void set_uuid(const char* value, size_t size);
  std::string* mutable_uuid();
  std::string* release_uuid();
  void set_allocated_uuid(std::string* uuid);
  private:
  const std::string& _internal_uuid() const;
  void _internal_set_uuid(const std::string& value);
  std::string* _internal_mutable_uuid();
  public:

  // string group_uuid = 5;
  void clear_group_uuid();
  const std::string& group_uuid() const;
  void set_group_uuid(const std::string& value);
  void set_group_uuid(std::string&& value);
  void set_group_uuid(const char* value);
  void set_group_uuid(const char* value, size_t size);
  std::string* mutable_group_uuid();
  std::string* release_group_uuid();
  void set_allocated_group_uuid(std::string* group_uuid);
  private:
  const std::string& _internal_group_uuid() const;
  void _internal_set_group_uuid(const std::string& value);
  std::string* _internal_mutable_group_uuid();
  public:

  // string model_2d_artist_uuid = 8;
  void clear_model_2d_artist_uuid();
  const std::string& model_2d_artist_uuid() const;
  void set_model_2d_artist_uuid(const std::string& value);
  void set_model_2d_artist_uuid(std::string&& value);
  void set_model_2d_artist_uuid(const char* value);
  void set_model_2d_artist_uuid(const char* value, size_t size);
  std::string* mutable_model_2d_artist_uuid();
  std::string* release_model_2d_artist_uuid();
  void set_allocated_model_2d_artist_uuid(std::string* model_2d_artist_uuid);
  private:
  const std::string& _internal_model_2d_artist_uuid() const;
  void _internal_set_model_2d_artist_uuid(const std::string& value);
  std::string* _internal_mutable_model_2d_artist_uuid();
  public:

  // string model_3d_artist_uuid = 9;
  void clear_model_3d_artist_uuid();
  const std::string& model_3d_artist_uuid() const;
  void set_model_3d_artist_uuid(const std::string& value);
  void set_model_3d_artist_uuid(std::string&& value);
  void set_model_3d_artist_uuid(const char* value);
  void set_model_3d_artist_uuid(const char* value, size_t size);
  std::string* mutable_model_3d_artist_uuid();
  std::string* release_model_3d_artist_uuid();
  void set_allocated_model_3d_artist_uuid(std::string* model_3d_artist_uuid);
  private:
  const std::string& _internal_model_3d_artist_uuid() const;
  void _internal_set_model_3d_artist_uuid(const std::string& value);
  std::string* _internal_mutable_model_3d_artist_uuid();
  public:

  // .vNerve.vdb.VtuberType type = 2;
  void clear_type();
  ::vNerve::vdb::VtuberType type() const;
  void set_type(::vNerve::vdb::VtuberType value);
  private:
  ::vNerve::vdb::VtuberType _internal_type() const;
  void _internal_set_type(::vNerve::vdb::VtuberType value);
  public:

  // bool bot = 3;
  void clear_bot();
  bool bot() const;
  void set_bot(bool value);
  private:
  bool _internal_bot() const;
  void _internal_set_bot(bool value);
  public:

  // bool model_2d = 6;
  void clear_model_2d();
  bool model_2d() const;
  void set_model_2d(bool value);
  private:
  bool _internal_model_2d() const;
  void _internal_set_model_2d(bool value);
  public:

  // bool model_3d = 7;
  void clear_model_3d();
  bool model_3d() const;
  void set_model_3d(bool value);
  private:
  bool _internal_model_3d() const;
  void _internal_set_model_3d(bool value);
  public:

  // @@protoc_insertion_point(class_scope:vNerve.vdb.Vtuber)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vNerve::vdb::Account > accounts_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uuid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr group_uuid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_2d_artist_uuid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_3d_artist_uuid_;
  int type_;
  bool bot_;
  bool model_2d_;
  bool model_3d_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vNerve_2fvdb_2fvdb_2eproto;
};
// -------------------------------------------------------------------

class Account_NameTranslationEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Account_NameTranslationEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Account_NameTranslationEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  Account_NameTranslationEntry_DoNotUse();
  Account_NameTranslationEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Account_NameTranslationEntry_DoNotUse& other);
  static const Account_NameTranslationEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Account_NameTranslationEntry_DoNotUse*>(&_Account_NameTranslationEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "vNerve.vdb.Account.NameTranslationEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "vNerve.vdb.Account.NameTranslationEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vNerve_2fvdb_2fvdb_2eproto);
    return ::descriptor_table_vNerve_2fvdb_2fvdb_2eproto.file_level_metadata[3];
  }

  public:
};

// -------------------------------------------------------------------

class Account :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vNerve.vdb.Account) */ {
 public:
  Account();
  virtual ~Account();

  Account(const Account& from);
  Account(Account&& from) noexcept
    : Account() {
    *this = ::std::move(from);
  }

  inline Account& operator=(const Account& from) {
    CopyFrom(from);
    return *this;
  }
  inline Account& operator=(Account&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Account& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Account* internal_default_instance() {
    return reinterpret_cast<const Account*>(
               &_Account_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Account& a, Account& b) {
    a.Swap(&b);
  }
  inline void Swap(Account* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Account* New() const final {
    return CreateMaybeMessage<Account>(nullptr);
  }

  Account* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Account>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Account& from);
  void MergeFrom(const Account& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Account* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vNerve.vdb.Account";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vNerve_2fvdb_2fvdb_2eproto);
    return ::descriptor_table_vNerve_2fvdb_2fvdb_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kExtraFieldNumber = 4,
    kNameTranslationFieldNumber = 6,
    kIdFieldNumber = 1,
    kNameFieldNumber = 5,
    kAccountTypeFieldNumber = 2,
    kAccountPlatformFieldNumber = 3,
  };
  // repeated string extra = 4;
  int extra_size() const;
  private:
  int _internal_extra_size() const;
  public:
  void clear_extra();
  const std::string& extra(int index) const;
  std::string* mutable_extra(int index);
  void set_extra(int index, const std::string& value);
  void set_extra(int index, std::string&& value);
  void set_extra(int index, const char* value);
  void set_extra(int index, const char* value, size_t size);
  std::string* add_extra();
  void add_extra(const std::string& value);
  void add_extra(std::string&& value);
  void add_extra(const char* value);
  void add_extra(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& extra() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_extra();
  private:
  const std::string& _internal_extra(int index) const;
  std::string* _internal_add_extra();
  public:

  // map<string, string> name_translation = 6;
  int name_translation_size() const;
  private:
  int _internal_name_translation_size() const;
  public:
  void clear_name_translation();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_name_translation() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_name_translation();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      name_translation() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_name_translation();

  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string name = 5;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .vNerve.vdb.AccountType account_type = 2;
  void clear_account_type();
  ::vNerve::vdb::AccountType account_type() const;
  void set_account_type(::vNerve::vdb::AccountType value);
  private:
  ::vNerve::vdb::AccountType _internal_account_type() const;
  void _internal_set_account_type(::vNerve::vdb::AccountType value);
  public:

  // .vNerve.vdb.AccountPlatform account_platform = 3;
  void clear_account_platform();
  ::vNerve::vdb::AccountPlatform account_platform() const;
  void set_account_platform(::vNerve::vdb::AccountPlatform value);
  private:
  ::vNerve::vdb::AccountPlatform _internal_account_platform() const;
  void _internal_set_account_platform(::vNerve::vdb::AccountPlatform value);
  public:

  // @@protoc_insertion_point(class_scope:vNerve.vdb.Account)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> extra_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      Account_NameTranslationEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > name_translation_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  int account_type_;
  int account_platform_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vNerve_2fvdb_2fvdb_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GetVtbsRequest

// -------------------------------------------------------------------

// VtuberCollection

// repeated .vNerve.vdb.Vtuber vtubers = 1;
inline int VtuberCollection::_internal_vtubers_size() const {
  return vtubers_.size();
}
inline int VtuberCollection::vtubers_size() const {
  return _internal_vtubers_size();
}
inline void VtuberCollection::clear_vtubers() {
  vtubers_.Clear();
}
inline ::vNerve::vdb::Vtuber* VtuberCollection::mutable_vtubers(int index) {
  // @@protoc_insertion_point(field_mutable:vNerve.vdb.VtuberCollection.vtubers)
  return vtubers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vNerve::vdb::Vtuber >*
VtuberCollection::mutable_vtubers() {
  // @@protoc_insertion_point(field_mutable_list:vNerve.vdb.VtuberCollection.vtubers)
  return &vtubers_;
}
inline const ::vNerve::vdb::Vtuber& VtuberCollection::_internal_vtubers(int index) const {
  return vtubers_.Get(index);
}
inline const ::vNerve::vdb::Vtuber& VtuberCollection::vtubers(int index) const {
  // @@protoc_insertion_point(field_get:vNerve.vdb.VtuberCollection.vtubers)
  return _internal_vtubers(index);
}
inline ::vNerve::vdb::Vtuber* VtuberCollection::_internal_add_vtubers() {
  return vtubers_.Add();
}
inline ::vNerve::vdb::Vtuber* VtuberCollection::add_vtubers() {
  // @@protoc_insertion_point(field_add:vNerve.vdb.VtuberCollection.vtubers)
  return _internal_add_vtubers();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vNerve::vdb::Vtuber >&
VtuberCollection::vtubers() const {
  // @@protoc_insertion_point(field_list:vNerve.vdb.VtuberCollection.vtubers)
  return vtubers_;
}

// -------------------------------------------------------------------

// Vtuber

// string uuid = 1;
inline void Vtuber::clear_uuid() {
  uuid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Vtuber::uuid() const {
  // @@protoc_insertion_point(field_get:vNerve.vdb.Vtuber.uuid)
  return _internal_uuid();
}
inline void Vtuber::set_uuid(const std::string& value) {
  _internal_set_uuid(value);
  // @@protoc_insertion_point(field_set:vNerve.vdb.Vtuber.uuid)
}
inline std::string* Vtuber::mutable_uuid() {
  // @@protoc_insertion_point(field_mutable:vNerve.vdb.Vtuber.uuid)
  return _internal_mutable_uuid();
}
inline const std::string& Vtuber::_internal_uuid() const {
  return uuid_.GetNoArena();
}
inline void Vtuber::_internal_set_uuid(const std::string& value) {
  
  uuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Vtuber::set_uuid(std::string&& value) {
  
  uuid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:vNerve.vdb.Vtuber.uuid)
}
inline void Vtuber::set_uuid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  uuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vNerve.vdb.Vtuber.uuid)
}
inline void Vtuber::set_uuid(const char* value, size_t size) {
  
  uuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vNerve.vdb.Vtuber.uuid)
}
inline std::string* Vtuber::_internal_mutable_uuid() {
  
  return uuid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Vtuber::release_uuid() {
  // @@protoc_insertion_point(field_release:vNerve.vdb.Vtuber.uuid)
  
  return uuid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Vtuber::set_allocated_uuid(std::string* uuid) {
  if (uuid != nullptr) {
    
  } else {
    
  }
  uuid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uuid);
  // @@protoc_insertion_point(field_set_allocated:vNerve.vdb.Vtuber.uuid)
}

// .vNerve.vdb.VtuberType type = 2;
inline void Vtuber::clear_type() {
  type_ = 0;
}
inline ::vNerve::vdb::VtuberType Vtuber::_internal_type() const {
  return static_cast< ::vNerve::vdb::VtuberType >(type_);
}
inline ::vNerve::vdb::VtuberType Vtuber::type() const {
  // @@protoc_insertion_point(field_get:vNerve.vdb.Vtuber.type)
  return _internal_type();
}
inline void Vtuber::_internal_set_type(::vNerve::vdb::VtuberType value) {
  
  type_ = value;
}
inline void Vtuber::set_type(::vNerve::vdb::VtuberType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:vNerve.vdb.Vtuber.type)
}

// bool bot = 3;
inline void Vtuber::clear_bot() {
  bot_ = false;
}
inline bool Vtuber::_internal_bot() const {
  return bot_;
}
inline bool Vtuber::bot() const {
  // @@protoc_insertion_point(field_get:vNerve.vdb.Vtuber.bot)
  return _internal_bot();
}
inline void Vtuber::_internal_set_bot(bool value) {
  
  bot_ = value;
}
inline void Vtuber::set_bot(bool value) {
  _internal_set_bot(value);
  // @@protoc_insertion_point(field_set:vNerve.vdb.Vtuber.bot)
}

// repeated .vNerve.vdb.Account accounts = 4;
inline int Vtuber::_internal_accounts_size() const {
  return accounts_.size();
}
inline int Vtuber::accounts_size() const {
  return _internal_accounts_size();
}
inline void Vtuber::clear_accounts() {
  accounts_.Clear();
}
inline ::vNerve::vdb::Account* Vtuber::mutable_accounts(int index) {
  // @@protoc_insertion_point(field_mutable:vNerve.vdb.Vtuber.accounts)
  return accounts_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vNerve::vdb::Account >*
Vtuber::mutable_accounts() {
  // @@protoc_insertion_point(field_mutable_list:vNerve.vdb.Vtuber.accounts)
  return &accounts_;
}
inline const ::vNerve::vdb::Account& Vtuber::_internal_accounts(int index) const {
  return accounts_.Get(index);
}
inline const ::vNerve::vdb::Account& Vtuber::accounts(int index) const {
  // @@protoc_insertion_point(field_get:vNerve.vdb.Vtuber.accounts)
  return _internal_accounts(index);
}
inline ::vNerve::vdb::Account* Vtuber::_internal_add_accounts() {
  return accounts_.Add();
}
inline ::vNerve::vdb::Account* Vtuber::add_accounts() {
  // @@protoc_insertion_point(field_add:vNerve.vdb.Vtuber.accounts)
  return _internal_add_accounts();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vNerve::vdb::Account >&
Vtuber::accounts() const {
  // @@protoc_insertion_point(field_list:vNerve.vdb.Vtuber.accounts)
  return accounts_;
}

// string group_uuid = 5;
inline void Vtuber::clear_group_uuid() {
  group_uuid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Vtuber::group_uuid() const {
  // @@protoc_insertion_point(field_get:vNerve.vdb.Vtuber.group_uuid)
  return _internal_group_uuid();
}
inline void Vtuber::set_group_uuid(const std::string& value) {
  _internal_set_group_uuid(value);
  // @@protoc_insertion_point(field_set:vNerve.vdb.Vtuber.group_uuid)
}
inline std::string* Vtuber::mutable_group_uuid() {
  // @@protoc_insertion_point(field_mutable:vNerve.vdb.Vtuber.group_uuid)
  return _internal_mutable_group_uuid();
}
inline const std::string& Vtuber::_internal_group_uuid() const {
  return group_uuid_.GetNoArena();
}
inline void Vtuber::_internal_set_group_uuid(const std::string& value) {
  
  group_uuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Vtuber::set_group_uuid(std::string&& value) {
  
  group_uuid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:vNerve.vdb.Vtuber.group_uuid)
}
inline void Vtuber::set_group_uuid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  group_uuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vNerve.vdb.Vtuber.group_uuid)
}
inline void Vtuber::set_group_uuid(const char* value, size_t size) {
  
  group_uuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vNerve.vdb.Vtuber.group_uuid)
}
inline std::string* Vtuber::_internal_mutable_group_uuid() {
  
  return group_uuid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Vtuber::release_group_uuid() {
  // @@protoc_insertion_point(field_release:vNerve.vdb.Vtuber.group_uuid)
  
  return group_uuid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Vtuber::set_allocated_group_uuid(std::string* group_uuid) {
  if (group_uuid != nullptr) {
    
  } else {
    
  }
  group_uuid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), group_uuid);
  // @@protoc_insertion_point(field_set_allocated:vNerve.vdb.Vtuber.group_uuid)
}

// bool model_2d = 6;
inline void Vtuber::clear_model_2d() {
  model_2d_ = false;
}
inline bool Vtuber::_internal_model_2d() const {
  return model_2d_;
}
inline bool Vtuber::model_2d() const {
  // @@protoc_insertion_point(field_get:vNerve.vdb.Vtuber.model_2d)
  return _internal_model_2d();
}
inline void Vtuber::_internal_set_model_2d(bool value) {
  
  model_2d_ = value;
}
inline void Vtuber::set_model_2d(bool value) {
  _internal_set_model_2d(value);
  // @@protoc_insertion_point(field_set:vNerve.vdb.Vtuber.model_2d)
}

// bool model_3d = 7;
inline void Vtuber::clear_model_3d() {
  model_3d_ = false;
}
inline bool Vtuber::_internal_model_3d() const {
  return model_3d_;
}
inline bool Vtuber::model_3d() const {
  // @@protoc_insertion_point(field_get:vNerve.vdb.Vtuber.model_3d)
  return _internal_model_3d();
}
inline void Vtuber::_internal_set_model_3d(bool value) {
  
  model_3d_ = value;
}
inline void Vtuber::set_model_3d(bool value) {
  _internal_set_model_3d(value);
  // @@protoc_insertion_point(field_set:vNerve.vdb.Vtuber.model_3d)
}

// string model_2d_artist_uuid = 8;
inline void Vtuber::clear_model_2d_artist_uuid() {
  model_2d_artist_uuid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Vtuber::model_2d_artist_uuid() const {
  // @@protoc_insertion_point(field_get:vNerve.vdb.Vtuber.model_2d_artist_uuid)
  return _internal_model_2d_artist_uuid();
}
inline void Vtuber::set_model_2d_artist_uuid(const std::string& value) {
  _internal_set_model_2d_artist_uuid(value);
  // @@protoc_insertion_point(field_set:vNerve.vdb.Vtuber.model_2d_artist_uuid)
}
inline std::string* Vtuber::mutable_model_2d_artist_uuid() {
  // @@protoc_insertion_point(field_mutable:vNerve.vdb.Vtuber.model_2d_artist_uuid)
  return _internal_mutable_model_2d_artist_uuid();
}
inline const std::string& Vtuber::_internal_model_2d_artist_uuid() const {
  return model_2d_artist_uuid_.GetNoArena();
}
inline void Vtuber::_internal_set_model_2d_artist_uuid(const std::string& value) {
  
  model_2d_artist_uuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Vtuber::set_model_2d_artist_uuid(std::string&& value) {
  
  model_2d_artist_uuid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:vNerve.vdb.Vtuber.model_2d_artist_uuid)
}
inline void Vtuber::set_model_2d_artist_uuid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  model_2d_artist_uuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vNerve.vdb.Vtuber.model_2d_artist_uuid)
}
inline void Vtuber::set_model_2d_artist_uuid(const char* value, size_t size) {
  
  model_2d_artist_uuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vNerve.vdb.Vtuber.model_2d_artist_uuid)
}
inline std::string* Vtuber::_internal_mutable_model_2d_artist_uuid() {
  
  return model_2d_artist_uuid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Vtuber::release_model_2d_artist_uuid() {
  // @@protoc_insertion_point(field_release:vNerve.vdb.Vtuber.model_2d_artist_uuid)
  
  return model_2d_artist_uuid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Vtuber::set_allocated_model_2d_artist_uuid(std::string* model_2d_artist_uuid) {
  if (model_2d_artist_uuid != nullptr) {
    
  } else {
    
  }
  model_2d_artist_uuid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), model_2d_artist_uuid);
  // @@protoc_insertion_point(field_set_allocated:vNerve.vdb.Vtuber.model_2d_artist_uuid)
}

// string model_3d_artist_uuid = 9;
inline void Vtuber::clear_model_3d_artist_uuid() {
  model_3d_artist_uuid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Vtuber::model_3d_artist_uuid() const {
  // @@protoc_insertion_point(field_get:vNerve.vdb.Vtuber.model_3d_artist_uuid)
  return _internal_model_3d_artist_uuid();
}
inline void Vtuber::set_model_3d_artist_uuid(const std::string& value) {
  _internal_set_model_3d_artist_uuid(value);
  // @@protoc_insertion_point(field_set:vNerve.vdb.Vtuber.model_3d_artist_uuid)
}
inline std::string* Vtuber::mutable_model_3d_artist_uuid() {
  // @@protoc_insertion_point(field_mutable:vNerve.vdb.Vtuber.model_3d_artist_uuid)
  return _internal_mutable_model_3d_artist_uuid();
}
inline const std::string& Vtuber::_internal_model_3d_artist_uuid() const {
  return model_3d_artist_uuid_.GetNoArena();
}
inline void Vtuber::_internal_set_model_3d_artist_uuid(const std::string& value) {
  
  model_3d_artist_uuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Vtuber::set_model_3d_artist_uuid(std::string&& value) {
  
  model_3d_artist_uuid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:vNerve.vdb.Vtuber.model_3d_artist_uuid)
}
inline void Vtuber::set_model_3d_artist_uuid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  model_3d_artist_uuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vNerve.vdb.Vtuber.model_3d_artist_uuid)
}
inline void Vtuber::set_model_3d_artist_uuid(const char* value, size_t size) {
  
  model_3d_artist_uuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vNerve.vdb.Vtuber.model_3d_artist_uuid)
}
inline std::string* Vtuber::_internal_mutable_model_3d_artist_uuid() {
  
  return model_3d_artist_uuid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Vtuber::release_model_3d_artist_uuid() {
  // @@protoc_insertion_point(field_release:vNerve.vdb.Vtuber.model_3d_artist_uuid)
  
  return model_3d_artist_uuid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Vtuber::set_allocated_model_3d_artist_uuid(std::string* model_3d_artist_uuid) {
  if (model_3d_artist_uuid != nullptr) {
    
  } else {
    
  }
  model_3d_artist_uuid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), model_3d_artist_uuid);
  // @@protoc_insertion_point(field_set_allocated:vNerve.vdb.Vtuber.model_3d_artist_uuid)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Account

// string id = 1;
inline void Account::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Account::id() const {
  // @@protoc_insertion_point(field_get:vNerve.vdb.Account.id)
  return _internal_id();
}
inline void Account::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:vNerve.vdb.Account.id)
}
inline std::string* Account::mutable_id() {
  // @@protoc_insertion_point(field_mutable:vNerve.vdb.Account.id)
  return _internal_mutable_id();
}
inline const std::string& Account::_internal_id() const {
  return id_.GetNoArena();
}
inline void Account::_internal_set_id(const std::string& value) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Account::set_id(std::string&& value) {
  
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:vNerve.vdb.Account.id)
}
inline void Account::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vNerve.vdb.Account.id)
}
inline void Account::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vNerve.vdb.Account.id)
}
inline std::string* Account::_internal_mutable_id() {
  
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Account::release_id() {
  // @@protoc_insertion_point(field_release:vNerve.vdb.Account.id)
  
  return id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Account::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:vNerve.vdb.Account.id)
}

// .vNerve.vdb.AccountType account_type = 2;
inline void Account::clear_account_type() {
  account_type_ = 0;
}
inline ::vNerve::vdb::AccountType Account::_internal_account_type() const {
  return static_cast< ::vNerve::vdb::AccountType >(account_type_);
}
inline ::vNerve::vdb::AccountType Account::account_type() const {
  // @@protoc_insertion_point(field_get:vNerve.vdb.Account.account_type)
  return _internal_account_type();
}
inline void Account::_internal_set_account_type(::vNerve::vdb::AccountType value) {
  
  account_type_ = value;
}
inline void Account::set_account_type(::vNerve::vdb::AccountType value) {
  _internal_set_account_type(value);
  // @@protoc_insertion_point(field_set:vNerve.vdb.Account.account_type)
}

// .vNerve.vdb.AccountPlatform account_platform = 3;
inline void Account::clear_account_platform() {
  account_platform_ = 0;
}
inline ::vNerve::vdb::AccountPlatform Account::_internal_account_platform() const {
  return static_cast< ::vNerve::vdb::AccountPlatform >(account_platform_);
}
inline ::vNerve::vdb::AccountPlatform Account::account_platform() const {
  // @@protoc_insertion_point(field_get:vNerve.vdb.Account.account_platform)
  return _internal_account_platform();
}
inline void Account::_internal_set_account_platform(::vNerve::vdb::AccountPlatform value) {
  
  account_platform_ = value;
}
inline void Account::set_account_platform(::vNerve::vdb::AccountPlatform value) {
  _internal_set_account_platform(value);
  // @@protoc_insertion_point(field_set:vNerve.vdb.Account.account_platform)
}

// repeated string extra = 4;
inline int Account::_internal_extra_size() const {
  return extra_.size();
}
inline int Account::extra_size() const {
  return _internal_extra_size();
}
inline void Account::clear_extra() {
  extra_.Clear();
}
inline std::string* Account::add_extra() {
  // @@protoc_insertion_point(field_add_mutable:vNerve.vdb.Account.extra)
  return _internal_add_extra();
}
inline const std::string& Account::_internal_extra(int index) const {
  return extra_.Get(index);
}
inline const std::string& Account::extra(int index) const {
  // @@protoc_insertion_point(field_get:vNerve.vdb.Account.extra)
  return _internal_extra(index);
}
inline std::string* Account::mutable_extra(int index) {
  // @@protoc_insertion_point(field_mutable:vNerve.vdb.Account.extra)
  return extra_.Mutable(index);
}
inline void Account::set_extra(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:vNerve.vdb.Account.extra)
  extra_.Mutable(index)->assign(value);
}
inline void Account::set_extra(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:vNerve.vdb.Account.extra)
  extra_.Mutable(index)->assign(std::move(value));
}
inline void Account::set_extra(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  extra_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:vNerve.vdb.Account.extra)
}
inline void Account::set_extra(int index, const char* value, size_t size) {
  extra_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:vNerve.vdb.Account.extra)
}
inline std::string* Account::_internal_add_extra() {
  return extra_.Add();
}
inline void Account::add_extra(const std::string& value) {
  extra_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:vNerve.vdb.Account.extra)
}
inline void Account::add_extra(std::string&& value) {
  extra_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:vNerve.vdb.Account.extra)
}
inline void Account::add_extra(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  extra_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:vNerve.vdb.Account.extra)
}
inline void Account::add_extra(const char* value, size_t size) {
  extra_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:vNerve.vdb.Account.extra)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Account::extra() const {
  // @@protoc_insertion_point(field_list:vNerve.vdb.Account.extra)
  return extra_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Account::mutable_extra() {
  // @@protoc_insertion_point(field_mutable_list:vNerve.vdb.Account.extra)
  return &extra_;
}

// string name = 5;
inline void Account::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Account::name() const {
  // @@protoc_insertion_point(field_get:vNerve.vdb.Account.name)
  return _internal_name();
}
inline void Account::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:vNerve.vdb.Account.name)
}
inline std::string* Account::mutable_name() {
  // @@protoc_insertion_point(field_mutable:vNerve.vdb.Account.name)
  return _internal_mutable_name();
}
inline const std::string& Account::_internal_name() const {
  return name_.GetNoArena();
}
inline void Account::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Account::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:vNerve.vdb.Account.name)
}
inline void Account::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vNerve.vdb.Account.name)
}
inline void Account::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vNerve.vdb.Account.name)
}
inline std::string* Account::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Account::release_name() {
  // @@protoc_insertion_point(field_release:vNerve.vdb.Account.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Account::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:vNerve.vdb.Account.name)
}

// map<string, string> name_translation = 6;
inline int Account::_internal_name_translation_size() const {
  return name_translation_.size();
}
inline int Account::name_translation_size() const {
  return _internal_name_translation_size();
}
inline void Account::clear_name_translation() {
  name_translation_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
Account::_internal_name_translation() const {
  return name_translation_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
Account::name_translation() const {
  // @@protoc_insertion_point(field_map:vNerve.vdb.Account.name_translation)
  return _internal_name_translation();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
Account::_internal_mutable_name_translation() {
  return name_translation_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
Account::mutable_name_translation() {
  // @@protoc_insertion_point(field_mutable_map:vNerve.vdb.Account.name_translation)
  return _internal_mutable_name_translation();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace vdb
}  // namespace vNerve

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::vNerve::vdb::VtuberType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::vNerve::vdb::VtuberType>() {
  return ::vNerve::vdb::VtuberType_descriptor();
}
template <> struct is_proto_enum< ::vNerve::vdb::AccountType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::vNerve::vdb::AccountType>() {
  return ::vNerve::vdb::AccountType_descriptor();
}
template <> struct is_proto_enum< ::vNerve::vdb::AccountPlatform> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::vNerve::vdb::AccountPlatform>() {
  return ::vNerve::vdb::AccountPlatform_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_vNerve_2fvdb_2fvdb_2eproto
