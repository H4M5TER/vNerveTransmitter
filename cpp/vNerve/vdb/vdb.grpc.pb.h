// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: vNerve/vdb/vdb.proto
#ifndef GRPC_vNerve_2fvdb_2fvdb_2eproto__INCLUDED
#define GRPC_vNerve_2fvdb_2fvdb_2eproto__INCLUDED

#include "vNerve/vdb/vdb.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace vNerve {
namespace vdb {

class VtuberDatabase final {
 public:
  static constexpr char const* service_full_name() {
    return "vNerve.vdb.VtuberDatabase";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status GetAllVtubers(::grpc::ClientContext* context, const ::vNerve::vdb::GetVtbsRequest& request, ::vNerve::vdb::VtuberCollection* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vNerve::vdb::VtuberCollection>> AsyncGetAllVtubers(::grpc::ClientContext* context, const ::vNerve::vdb::GetVtbsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vNerve::vdb::VtuberCollection>>(AsyncGetAllVtubersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vNerve::vdb::VtuberCollection>> PrepareAsyncGetAllVtubers(::grpc::ClientContext* context, const ::vNerve::vdb::GetVtbsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vNerve::vdb::VtuberCollection>>(PrepareAsyncGetAllVtubersRaw(context, request, cq));
    }
    virtual ::grpc::Status GetAllGroups(::grpc::ClientContext* context, const ::vNerve::vdb::GetVtbsRequest& request, ::vNerve::vdb::GroupCollection* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vNerve::vdb::GroupCollection>> AsyncGetAllGroups(::grpc::ClientContext* context, const ::vNerve::vdb::GetVtbsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vNerve::vdb::GroupCollection>>(AsyncGetAllGroupsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vNerve::vdb::GroupCollection>> PrepareAsyncGetAllGroups(::grpc::ClientContext* context, const ::vNerve::vdb::GetVtbsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vNerve::vdb::GroupCollection>>(PrepareAsyncGetAllGroupsRaw(context, request, cq));
    }
    virtual ::grpc::Status GetAllFans(::grpc::ClientContext* context, const ::vNerve::vdb::GetVtbsRequest& request, ::vNerve::vdb::FanCollection* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vNerve::vdb::FanCollection>> AsyncGetAllFans(::grpc::ClientContext* context, const ::vNerve::vdb::GetVtbsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vNerve::vdb::FanCollection>>(AsyncGetAllFansRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vNerve::vdb::FanCollection>> PrepareAsyncGetAllFans(::grpc::ClientContext* context, const ::vNerve::vdb::GetVtbsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vNerve::vdb::FanCollection>>(PrepareAsyncGetAllFansRaw(context, request, cq));
    }
    virtual ::grpc::Status GetLinkSyntaxs(::grpc::ClientContext* context, const ::vNerve::vdb::GetLinkSyntaxsRequest& request, ::vNerve::vdb::LinkSyntaxCollection* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vNerve::vdb::LinkSyntaxCollection>> AsyncGetLinkSyntaxs(::grpc::ClientContext* context, const ::vNerve::vdb::GetLinkSyntaxsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vNerve::vdb::LinkSyntaxCollection>>(AsyncGetLinkSyntaxsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vNerve::vdb::LinkSyntaxCollection>> PrepareAsyncGetLinkSyntaxs(::grpc::ClientContext* context, const ::vNerve::vdb::GetLinkSyntaxsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vNerve::vdb::LinkSyntaxCollection>>(PrepareAsyncGetLinkSyntaxsRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void GetAllVtubers(::grpc::ClientContext* context, const ::vNerve::vdb::GetVtbsRequest* request, ::vNerve::vdb::VtuberCollection* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetAllVtubers(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::vNerve::vdb::VtuberCollection* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetAllVtubers(::grpc::ClientContext* context, const ::vNerve::vdb::GetVtbsRequest* request, ::vNerve::vdb::VtuberCollection* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetAllVtubers(::grpc::ClientContext* context, const ::vNerve::vdb::GetVtbsRequest* request, ::vNerve::vdb::VtuberCollection* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetAllVtubers(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::vNerve::vdb::VtuberCollection* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetAllVtubers(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::vNerve::vdb::VtuberCollection* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void GetAllGroups(::grpc::ClientContext* context, const ::vNerve::vdb::GetVtbsRequest* request, ::vNerve::vdb::GroupCollection* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetAllGroups(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::vNerve::vdb::GroupCollection* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetAllGroups(::grpc::ClientContext* context, const ::vNerve::vdb::GetVtbsRequest* request, ::vNerve::vdb::GroupCollection* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetAllGroups(::grpc::ClientContext* context, const ::vNerve::vdb::GetVtbsRequest* request, ::vNerve::vdb::GroupCollection* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetAllGroups(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::vNerve::vdb::GroupCollection* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetAllGroups(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::vNerve::vdb::GroupCollection* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void GetAllFans(::grpc::ClientContext* context, const ::vNerve::vdb::GetVtbsRequest* request, ::vNerve::vdb::FanCollection* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetAllFans(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::vNerve::vdb::FanCollection* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetAllFans(::grpc::ClientContext* context, const ::vNerve::vdb::GetVtbsRequest* request, ::vNerve::vdb::FanCollection* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetAllFans(::grpc::ClientContext* context, const ::vNerve::vdb::GetVtbsRequest* request, ::vNerve::vdb::FanCollection* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetAllFans(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::vNerve::vdb::FanCollection* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetAllFans(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::vNerve::vdb::FanCollection* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void GetLinkSyntaxs(::grpc::ClientContext* context, const ::vNerve::vdb::GetLinkSyntaxsRequest* request, ::vNerve::vdb::LinkSyntaxCollection* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetLinkSyntaxs(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::vNerve::vdb::LinkSyntaxCollection* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetLinkSyntaxs(::grpc::ClientContext* context, const ::vNerve::vdb::GetLinkSyntaxsRequest* request, ::vNerve::vdb::LinkSyntaxCollection* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetLinkSyntaxs(::grpc::ClientContext* context, const ::vNerve::vdb::GetLinkSyntaxsRequest* request, ::vNerve::vdb::LinkSyntaxCollection* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetLinkSyntaxs(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::vNerve::vdb::LinkSyntaxCollection* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetLinkSyntaxs(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::vNerve::vdb::LinkSyntaxCollection* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::vNerve::vdb::VtuberCollection>* AsyncGetAllVtubersRaw(::grpc::ClientContext* context, const ::vNerve::vdb::GetVtbsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::vNerve::vdb::VtuberCollection>* PrepareAsyncGetAllVtubersRaw(::grpc::ClientContext* context, const ::vNerve::vdb::GetVtbsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::vNerve::vdb::GroupCollection>* AsyncGetAllGroupsRaw(::grpc::ClientContext* context, const ::vNerve::vdb::GetVtbsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::vNerve::vdb::GroupCollection>* PrepareAsyncGetAllGroupsRaw(::grpc::ClientContext* context, const ::vNerve::vdb::GetVtbsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::vNerve::vdb::FanCollection>* AsyncGetAllFansRaw(::grpc::ClientContext* context, const ::vNerve::vdb::GetVtbsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::vNerve::vdb::FanCollection>* PrepareAsyncGetAllFansRaw(::grpc::ClientContext* context, const ::vNerve::vdb::GetVtbsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::vNerve::vdb::LinkSyntaxCollection>* AsyncGetLinkSyntaxsRaw(::grpc::ClientContext* context, const ::vNerve::vdb::GetLinkSyntaxsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::vNerve::vdb::LinkSyntaxCollection>* PrepareAsyncGetLinkSyntaxsRaw(::grpc::ClientContext* context, const ::vNerve::vdb::GetLinkSyntaxsRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status GetAllVtubers(::grpc::ClientContext* context, const ::vNerve::vdb::GetVtbsRequest& request, ::vNerve::vdb::VtuberCollection* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vNerve::vdb::VtuberCollection>> AsyncGetAllVtubers(::grpc::ClientContext* context, const ::vNerve::vdb::GetVtbsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vNerve::vdb::VtuberCollection>>(AsyncGetAllVtubersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vNerve::vdb::VtuberCollection>> PrepareAsyncGetAllVtubers(::grpc::ClientContext* context, const ::vNerve::vdb::GetVtbsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vNerve::vdb::VtuberCollection>>(PrepareAsyncGetAllVtubersRaw(context, request, cq));
    }
    ::grpc::Status GetAllGroups(::grpc::ClientContext* context, const ::vNerve::vdb::GetVtbsRequest& request, ::vNerve::vdb::GroupCollection* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vNerve::vdb::GroupCollection>> AsyncGetAllGroups(::grpc::ClientContext* context, const ::vNerve::vdb::GetVtbsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vNerve::vdb::GroupCollection>>(AsyncGetAllGroupsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vNerve::vdb::GroupCollection>> PrepareAsyncGetAllGroups(::grpc::ClientContext* context, const ::vNerve::vdb::GetVtbsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vNerve::vdb::GroupCollection>>(PrepareAsyncGetAllGroupsRaw(context, request, cq));
    }
    ::grpc::Status GetAllFans(::grpc::ClientContext* context, const ::vNerve::vdb::GetVtbsRequest& request, ::vNerve::vdb::FanCollection* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vNerve::vdb::FanCollection>> AsyncGetAllFans(::grpc::ClientContext* context, const ::vNerve::vdb::GetVtbsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vNerve::vdb::FanCollection>>(AsyncGetAllFansRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vNerve::vdb::FanCollection>> PrepareAsyncGetAllFans(::grpc::ClientContext* context, const ::vNerve::vdb::GetVtbsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vNerve::vdb::FanCollection>>(PrepareAsyncGetAllFansRaw(context, request, cq));
    }
    ::grpc::Status GetLinkSyntaxs(::grpc::ClientContext* context, const ::vNerve::vdb::GetLinkSyntaxsRequest& request, ::vNerve::vdb::LinkSyntaxCollection* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vNerve::vdb::LinkSyntaxCollection>> AsyncGetLinkSyntaxs(::grpc::ClientContext* context, const ::vNerve::vdb::GetLinkSyntaxsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vNerve::vdb::LinkSyntaxCollection>>(AsyncGetLinkSyntaxsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vNerve::vdb::LinkSyntaxCollection>> PrepareAsyncGetLinkSyntaxs(::grpc::ClientContext* context, const ::vNerve::vdb::GetLinkSyntaxsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vNerve::vdb::LinkSyntaxCollection>>(PrepareAsyncGetLinkSyntaxsRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void GetAllVtubers(::grpc::ClientContext* context, const ::vNerve::vdb::GetVtbsRequest* request, ::vNerve::vdb::VtuberCollection* response, std::function<void(::grpc::Status)>) override;
      void GetAllVtubers(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::vNerve::vdb::VtuberCollection* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetAllVtubers(::grpc::ClientContext* context, const ::vNerve::vdb::GetVtbsRequest* request, ::vNerve::vdb::VtuberCollection* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetAllVtubers(::grpc::ClientContext* context, const ::vNerve::vdb::GetVtbsRequest* request, ::vNerve::vdb::VtuberCollection* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetAllVtubers(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::vNerve::vdb::VtuberCollection* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetAllVtubers(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::vNerve::vdb::VtuberCollection* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetAllGroups(::grpc::ClientContext* context, const ::vNerve::vdb::GetVtbsRequest* request, ::vNerve::vdb::GroupCollection* response, std::function<void(::grpc::Status)>) override;
      void GetAllGroups(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::vNerve::vdb::GroupCollection* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetAllGroups(::grpc::ClientContext* context, const ::vNerve::vdb::GetVtbsRequest* request, ::vNerve::vdb::GroupCollection* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetAllGroups(::grpc::ClientContext* context, const ::vNerve::vdb::GetVtbsRequest* request, ::vNerve::vdb::GroupCollection* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetAllGroups(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::vNerve::vdb::GroupCollection* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetAllGroups(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::vNerve::vdb::GroupCollection* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetAllFans(::grpc::ClientContext* context, const ::vNerve::vdb::GetVtbsRequest* request, ::vNerve::vdb::FanCollection* response, std::function<void(::grpc::Status)>) override;
      void GetAllFans(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::vNerve::vdb::FanCollection* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetAllFans(::grpc::ClientContext* context, const ::vNerve::vdb::GetVtbsRequest* request, ::vNerve::vdb::FanCollection* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetAllFans(::grpc::ClientContext* context, const ::vNerve::vdb::GetVtbsRequest* request, ::vNerve::vdb::FanCollection* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetAllFans(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::vNerve::vdb::FanCollection* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetAllFans(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::vNerve::vdb::FanCollection* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetLinkSyntaxs(::grpc::ClientContext* context, const ::vNerve::vdb::GetLinkSyntaxsRequest* request, ::vNerve::vdb::LinkSyntaxCollection* response, std::function<void(::grpc::Status)>) override;
      void GetLinkSyntaxs(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::vNerve::vdb::LinkSyntaxCollection* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetLinkSyntaxs(::grpc::ClientContext* context, const ::vNerve::vdb::GetLinkSyntaxsRequest* request, ::vNerve::vdb::LinkSyntaxCollection* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetLinkSyntaxs(::grpc::ClientContext* context, const ::vNerve::vdb::GetLinkSyntaxsRequest* request, ::vNerve::vdb::LinkSyntaxCollection* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetLinkSyntaxs(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::vNerve::vdb::LinkSyntaxCollection* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetLinkSyntaxs(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::vNerve::vdb::LinkSyntaxCollection* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::vNerve::vdb::VtuberCollection>* AsyncGetAllVtubersRaw(::grpc::ClientContext* context, const ::vNerve::vdb::GetVtbsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::vNerve::vdb::VtuberCollection>* PrepareAsyncGetAllVtubersRaw(::grpc::ClientContext* context, const ::vNerve::vdb::GetVtbsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::vNerve::vdb::GroupCollection>* AsyncGetAllGroupsRaw(::grpc::ClientContext* context, const ::vNerve::vdb::GetVtbsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::vNerve::vdb::GroupCollection>* PrepareAsyncGetAllGroupsRaw(::grpc::ClientContext* context, const ::vNerve::vdb::GetVtbsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::vNerve::vdb::FanCollection>* AsyncGetAllFansRaw(::grpc::ClientContext* context, const ::vNerve::vdb::GetVtbsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::vNerve::vdb::FanCollection>* PrepareAsyncGetAllFansRaw(::grpc::ClientContext* context, const ::vNerve::vdb::GetVtbsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::vNerve::vdb::LinkSyntaxCollection>* AsyncGetLinkSyntaxsRaw(::grpc::ClientContext* context, const ::vNerve::vdb::GetLinkSyntaxsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::vNerve::vdb::LinkSyntaxCollection>* PrepareAsyncGetLinkSyntaxsRaw(::grpc::ClientContext* context, const ::vNerve::vdb::GetLinkSyntaxsRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetAllVtubers_;
    const ::grpc::internal::RpcMethod rpcmethod_GetAllGroups_;
    const ::grpc::internal::RpcMethod rpcmethod_GetAllFans_;
    const ::grpc::internal::RpcMethod rpcmethod_GetLinkSyntaxs_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status GetAllVtubers(::grpc::ServerContext* context, const ::vNerve::vdb::GetVtbsRequest* request, ::vNerve::vdb::VtuberCollection* response);
    virtual ::grpc::Status GetAllGroups(::grpc::ServerContext* context, const ::vNerve::vdb::GetVtbsRequest* request, ::vNerve::vdb::GroupCollection* response);
    virtual ::grpc::Status GetAllFans(::grpc::ServerContext* context, const ::vNerve::vdb::GetVtbsRequest* request, ::vNerve::vdb::FanCollection* response);
    virtual ::grpc::Status GetLinkSyntaxs(::grpc::ServerContext* context, const ::vNerve::vdb::GetLinkSyntaxsRequest* request, ::vNerve::vdb::LinkSyntaxCollection* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetAllVtubers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetAllVtubers() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetAllVtubers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllVtubers(::grpc::ServerContext* /*context*/, const ::vNerve::vdb::GetVtbsRequest* /*request*/, ::vNerve::vdb::VtuberCollection* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAllVtubers(::grpc::ServerContext* context, ::vNerve::vdb::GetVtbsRequest* request, ::grpc::ServerAsyncResponseWriter< ::vNerve::vdb::VtuberCollection>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetAllGroups : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetAllGroups() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetAllGroups() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllGroups(::grpc::ServerContext* /*context*/, const ::vNerve::vdb::GetVtbsRequest* /*request*/, ::vNerve::vdb::GroupCollection* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAllGroups(::grpc::ServerContext* context, ::vNerve::vdb::GetVtbsRequest* request, ::grpc::ServerAsyncResponseWriter< ::vNerve::vdb::GroupCollection>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetAllFans : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetAllFans() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_GetAllFans() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllFans(::grpc::ServerContext* /*context*/, const ::vNerve::vdb::GetVtbsRequest* /*request*/, ::vNerve::vdb::FanCollection* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAllFans(::grpc::ServerContext* context, ::vNerve::vdb::GetVtbsRequest* request, ::grpc::ServerAsyncResponseWriter< ::vNerve::vdb::FanCollection>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetLinkSyntaxs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetLinkSyntaxs() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_GetLinkSyntaxs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLinkSyntaxs(::grpc::ServerContext* /*context*/, const ::vNerve::vdb::GetLinkSyntaxsRequest* /*request*/, ::vNerve::vdb::LinkSyntaxCollection* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetLinkSyntaxs(::grpc::ServerContext* context, ::vNerve::vdb::GetLinkSyntaxsRequest* request, ::grpc::ServerAsyncResponseWriter< ::vNerve::vdb::LinkSyntaxCollection>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetAllVtubers<WithAsyncMethod_GetAllGroups<WithAsyncMethod_GetAllFans<WithAsyncMethod_GetLinkSyntaxs<Service > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetAllVtubers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetAllVtubers() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::vNerve::vdb::GetVtbsRequest, ::vNerve::vdb::VtuberCollection>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::vNerve::vdb::GetVtbsRequest* request, ::vNerve::vdb::VtuberCollection* response) { return this->GetAllVtubers(context, request, response); }));}
    void SetMessageAllocatorFor_GetAllVtubers(
        ::grpc::experimental::MessageAllocator< ::vNerve::vdb::GetVtbsRequest, ::vNerve::vdb::VtuberCollection>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::vNerve::vdb::GetVtbsRequest, ::vNerve::vdb::VtuberCollection>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetAllVtubers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllVtubers(::grpc::ServerContext* /*context*/, const ::vNerve::vdb::GetVtbsRequest* /*request*/, ::vNerve::vdb::VtuberCollection* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetAllVtubers(
      ::grpc::CallbackServerContext* /*context*/, const ::vNerve::vdb::GetVtbsRequest* /*request*/, ::vNerve::vdb::VtuberCollection* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetAllVtubers(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::vNerve::vdb::GetVtbsRequest* /*request*/, ::vNerve::vdb::VtuberCollection* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetAllGroups : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetAllGroups() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::vNerve::vdb::GetVtbsRequest, ::vNerve::vdb::GroupCollection>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::vNerve::vdb::GetVtbsRequest* request, ::vNerve::vdb::GroupCollection* response) { return this->GetAllGroups(context, request, response); }));}
    void SetMessageAllocatorFor_GetAllGroups(
        ::grpc::experimental::MessageAllocator< ::vNerve::vdb::GetVtbsRequest, ::vNerve::vdb::GroupCollection>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::vNerve::vdb::GetVtbsRequest, ::vNerve::vdb::GroupCollection>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetAllGroups() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllGroups(::grpc::ServerContext* /*context*/, const ::vNerve::vdb::GetVtbsRequest* /*request*/, ::vNerve::vdb::GroupCollection* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetAllGroups(
      ::grpc::CallbackServerContext* /*context*/, const ::vNerve::vdb::GetVtbsRequest* /*request*/, ::vNerve::vdb::GroupCollection* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetAllGroups(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::vNerve::vdb::GetVtbsRequest* /*request*/, ::vNerve::vdb::GroupCollection* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetAllFans : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetAllFans() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::vNerve::vdb::GetVtbsRequest, ::vNerve::vdb::FanCollection>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::vNerve::vdb::GetVtbsRequest* request, ::vNerve::vdb::FanCollection* response) { return this->GetAllFans(context, request, response); }));}
    void SetMessageAllocatorFor_GetAllFans(
        ::grpc::experimental::MessageAllocator< ::vNerve::vdb::GetVtbsRequest, ::vNerve::vdb::FanCollection>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::vNerve::vdb::GetVtbsRequest, ::vNerve::vdb::FanCollection>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetAllFans() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllFans(::grpc::ServerContext* /*context*/, const ::vNerve::vdb::GetVtbsRequest* /*request*/, ::vNerve::vdb::FanCollection* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetAllFans(
      ::grpc::CallbackServerContext* /*context*/, const ::vNerve::vdb::GetVtbsRequest* /*request*/, ::vNerve::vdb::FanCollection* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetAllFans(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::vNerve::vdb::GetVtbsRequest* /*request*/, ::vNerve::vdb::FanCollection* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetLinkSyntaxs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetLinkSyntaxs() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(3,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::vNerve::vdb::GetLinkSyntaxsRequest, ::vNerve::vdb::LinkSyntaxCollection>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::vNerve::vdb::GetLinkSyntaxsRequest* request, ::vNerve::vdb::LinkSyntaxCollection* response) { return this->GetLinkSyntaxs(context, request, response); }));}
    void SetMessageAllocatorFor_GetLinkSyntaxs(
        ::grpc::experimental::MessageAllocator< ::vNerve::vdb::GetLinkSyntaxsRequest, ::vNerve::vdb::LinkSyntaxCollection>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(3);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::vNerve::vdb::GetLinkSyntaxsRequest, ::vNerve::vdb::LinkSyntaxCollection>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetLinkSyntaxs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLinkSyntaxs(::grpc::ServerContext* /*context*/, const ::vNerve::vdb::GetLinkSyntaxsRequest* /*request*/, ::vNerve::vdb::LinkSyntaxCollection* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetLinkSyntaxs(
      ::grpc::CallbackServerContext* /*context*/, const ::vNerve::vdb::GetLinkSyntaxsRequest* /*request*/, ::vNerve::vdb::LinkSyntaxCollection* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetLinkSyntaxs(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::vNerve::vdb::GetLinkSyntaxsRequest* /*request*/, ::vNerve::vdb::LinkSyntaxCollection* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_GetAllVtubers<ExperimentalWithCallbackMethod_GetAllGroups<ExperimentalWithCallbackMethod_GetAllFans<ExperimentalWithCallbackMethod_GetLinkSyntaxs<Service > > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_GetAllVtubers<ExperimentalWithCallbackMethod_GetAllGroups<ExperimentalWithCallbackMethod_GetAllFans<ExperimentalWithCallbackMethod_GetLinkSyntaxs<Service > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_GetAllVtubers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetAllVtubers() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetAllVtubers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllVtubers(::grpc::ServerContext* /*context*/, const ::vNerve::vdb::GetVtbsRequest* /*request*/, ::vNerve::vdb::VtuberCollection* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetAllGroups : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetAllGroups() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetAllGroups() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllGroups(::grpc::ServerContext* /*context*/, const ::vNerve::vdb::GetVtbsRequest* /*request*/, ::vNerve::vdb::GroupCollection* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetAllFans : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetAllFans() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_GetAllFans() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllFans(::grpc::ServerContext* /*context*/, const ::vNerve::vdb::GetVtbsRequest* /*request*/, ::vNerve::vdb::FanCollection* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetLinkSyntaxs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetLinkSyntaxs() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_GetLinkSyntaxs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLinkSyntaxs(::grpc::ServerContext* /*context*/, const ::vNerve::vdb::GetLinkSyntaxsRequest* /*request*/, ::vNerve::vdb::LinkSyntaxCollection* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetAllVtubers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetAllVtubers() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_GetAllVtubers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllVtubers(::grpc::ServerContext* /*context*/, const ::vNerve::vdb::GetVtbsRequest* /*request*/, ::vNerve::vdb::VtuberCollection* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAllVtubers(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetAllGroups : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetAllGroups() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetAllGroups() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllGroups(::grpc::ServerContext* /*context*/, const ::vNerve::vdb::GetVtbsRequest* /*request*/, ::vNerve::vdb::GroupCollection* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAllGroups(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetAllFans : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetAllFans() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_GetAllFans() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllFans(::grpc::ServerContext* /*context*/, const ::vNerve::vdb::GetVtbsRequest* /*request*/, ::vNerve::vdb::FanCollection* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAllFans(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetLinkSyntaxs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetLinkSyntaxs() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_GetLinkSyntaxs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLinkSyntaxs(::grpc::ServerContext* /*context*/, const ::vNerve::vdb::GetLinkSyntaxsRequest* /*request*/, ::vNerve::vdb::LinkSyntaxCollection* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetLinkSyntaxs(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetAllVtubers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetAllVtubers() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetAllVtubers(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetAllVtubers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllVtubers(::grpc::ServerContext* /*context*/, const ::vNerve::vdb::GetVtbsRequest* /*request*/, ::vNerve::vdb::VtuberCollection* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetAllVtubers(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetAllVtubers(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetAllGroups : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetAllGroups() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetAllGroups(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetAllGroups() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllGroups(::grpc::ServerContext* /*context*/, const ::vNerve::vdb::GetVtbsRequest* /*request*/, ::vNerve::vdb::GroupCollection* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetAllGroups(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetAllGroups(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetAllFans : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetAllFans() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetAllFans(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetAllFans() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllFans(::grpc::ServerContext* /*context*/, const ::vNerve::vdb::GetVtbsRequest* /*request*/, ::vNerve::vdb::FanCollection* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetAllFans(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetAllFans(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetLinkSyntaxs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetLinkSyntaxs() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(3,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetLinkSyntaxs(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetLinkSyntaxs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLinkSyntaxs(::grpc::ServerContext* /*context*/, const ::vNerve::vdb::GetLinkSyntaxsRequest* /*request*/, ::vNerve::vdb::LinkSyntaxCollection* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetLinkSyntaxs(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetLinkSyntaxs(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetAllVtubers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetAllVtubers() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::vNerve::vdb::GetVtbsRequest, ::vNerve::vdb::VtuberCollection>(std::bind(&WithStreamedUnaryMethod_GetAllVtubers<BaseClass>::StreamedGetAllVtubers, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetAllVtubers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetAllVtubers(::grpc::ServerContext* /*context*/, const ::vNerve::vdb::GetVtbsRequest* /*request*/, ::vNerve::vdb::VtuberCollection* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetAllVtubers(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::vNerve::vdb::GetVtbsRequest,::vNerve::vdb::VtuberCollection>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetAllGroups : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetAllGroups() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::vNerve::vdb::GetVtbsRequest, ::vNerve::vdb::GroupCollection>(std::bind(&WithStreamedUnaryMethod_GetAllGroups<BaseClass>::StreamedGetAllGroups, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetAllGroups() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetAllGroups(::grpc::ServerContext* /*context*/, const ::vNerve::vdb::GetVtbsRequest* /*request*/, ::vNerve::vdb::GroupCollection* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetAllGroups(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::vNerve::vdb::GetVtbsRequest,::vNerve::vdb::GroupCollection>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetAllFans : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetAllFans() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::vNerve::vdb::GetVtbsRequest, ::vNerve::vdb::FanCollection>(std::bind(&WithStreamedUnaryMethod_GetAllFans<BaseClass>::StreamedGetAllFans, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetAllFans() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetAllFans(::grpc::ServerContext* /*context*/, const ::vNerve::vdb::GetVtbsRequest* /*request*/, ::vNerve::vdb::FanCollection* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetAllFans(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::vNerve::vdb::GetVtbsRequest,::vNerve::vdb::FanCollection>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetLinkSyntaxs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetLinkSyntaxs() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::vNerve::vdb::GetLinkSyntaxsRequest, ::vNerve::vdb::LinkSyntaxCollection>(std::bind(&WithStreamedUnaryMethod_GetLinkSyntaxs<BaseClass>::StreamedGetLinkSyntaxs, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetLinkSyntaxs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetLinkSyntaxs(::grpc::ServerContext* /*context*/, const ::vNerve::vdb::GetLinkSyntaxsRequest* /*request*/, ::vNerve::vdb::LinkSyntaxCollection* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetLinkSyntaxs(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::vNerve::vdb::GetLinkSyntaxsRequest,::vNerve::vdb::LinkSyntaxCollection>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetAllVtubers<WithStreamedUnaryMethod_GetAllGroups<WithStreamedUnaryMethod_GetAllFans<WithStreamedUnaryMethod_GetLinkSyntaxs<Service > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetAllVtubers<WithStreamedUnaryMethod_GetAllGroups<WithStreamedUnaryMethod_GetAllFans<WithStreamedUnaryMethod_GetLinkSyntaxs<Service > > > > StreamedService;
};

}  // namespace vdb
}  // namespace vNerve


#endif  // GRPC_vNerve_2fvdb_2fvdb_2eproto__INCLUDED
